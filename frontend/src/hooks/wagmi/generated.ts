// Generated by @wagmi/cli@1.0.0 on 5/28/2023 at 8:32:09 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BancorBondingCurve
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bancorBondingCurveABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_supply', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveRatio', internalType: 'uint32', type: 'uint32' },
      { name: '_depositAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculatePurchaseReturn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_supply', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveRatio', internalType: 'uint32', type: 'uint32' },
      { name: '_sellAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateSaleReturn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_continuousTokenAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_continuousSupply', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveRatio', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'getContinuousBurnRefund',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'depositAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'continuousSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveRatio', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'getContinuousMintReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BancorFormula
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bancorFormulaABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_supply', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveRatio', internalType: 'uint32', type: 'uint32' },
      { name: '_depositAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculatePurchaseReturn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_supply', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveRatio', internalType: 'uint32', type: 'uint32' },
      { name: '_sellAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateSaleReturn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CallbackHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const callbackHandlerABI = [
  {
    type: 'error',
    inputs: [
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'UnkownCallback',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'sig', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'CallbackReceived',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContinuousDaoSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const continuousDaoSetupABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenVoting',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'governanceERC20',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'marketMaker',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'hatchAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DeployedContracts',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DAO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'ActionFailed',
  },
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  { type: 'error', inputs: [], name: 'ConditionNotPresentForAnyAddress' },
  { type: 'error', inputs: [], name: 'InsufficientGas' },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NativeTokenDepositAmountMismatch',
  },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [
      { name: 'protocolVersion', internalType: 'uint8[3]', type: 'uint8[3]' },
    ],
    name: 'ProtocolVersionUpgradeNotSupported',
  },
  { type: 'error', inputs: [], name: 'ReentrantCall' },
  { type: 'error', inputs: [], name: 'TooManyActions' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'UnkownCallback',
  },
  { type: 'error', inputs: [], name: 'ZeroAmount' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'sig', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'CallbackReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_reference',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'callId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'execResults',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NativeTokenDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'daoURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'NewURI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signatureValidator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SignatureValidatorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'interfaceId',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'callbackSelector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'magicNumber',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
    ],
    name: 'StandardCallbackRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'forwarder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TrustedForwarderSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXECUTE_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_METADATA_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_SIGNATURE_VALIDATOR_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_DAO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_reference', internalType: 'string', type: 'string' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_callId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [
      { name: 'execResults', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'failureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
      },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      { name: '_initialOwner', internalType: 'address', type: 'address' },
      { name: '_trustedForwarder', internalType: 'address', type: 'address' },
      { name: 'daoURI_', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_previousProtocolVersion',
        internalType: 'uint8[3]',
        type: 'uint8[3]',
      },
      { name: '_initData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'initializeFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' },
      { name: '_callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: '_magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'registerStandardCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newDaoURI', internalType: 'string', type: 'string' }],
    name: 'setDaoURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_metadata', internalType: 'bytes', type: 'bytes' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_signatureValidator', internalType: 'address', type: 'address' },
    ],
    name: 'setSignatureValidator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_newTrustedForwarder',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setTrustedForwarder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'signatureValidator',
    outputs: [{ name: '', internalType: 'contract IERC1271', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DAOFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_registry',
        internalType: 'contract DAORegistry',
        type: 'address',
      },
      {
        name: '_pluginSetupProcessor',
        internalType: 'contract PluginSetupProcessor',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'NoPluginProvided' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_daoSettings',
        internalType: 'struct DAOFactory.DAOSettings',
        type: 'tuple',
        components: [
          {
            name: 'trustedForwarder',
            internalType: 'address',
            type: 'address',
          },
          { name: 'daoURI', internalType: 'string', type: 'string' },
          { name: 'subdomain', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: '_pluginSettings',
        internalType: 'struct DAOFactory.PluginSettings[]',
        type: 'tuple[]',
        components: [
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              {
                name: 'pluginSetupRepo',
                internalType: 'contract PluginRepo',
                type: 'address',
              },
            ],
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'createDao',
    outputs: [
      { name: 'createdDao', internalType: 'contract DAO', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoBase',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoRegistry',
    outputs: [
      { name: '', internalType: 'contract DAORegistry', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pluginSetupProcessor',
    outputs: [
      {
        name: '',
        internalType: 'contract PluginSetupProcessor',
        type: 'address',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DAORegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoRegistryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractAlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractERC165SupportInvalid',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractInterfaceInvalid',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [{ name: 'subdomain', internalType: 'string', type: 'string' }],
    name: 'InvalidDaoSubdomain',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'subdomain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'DAORegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_DAO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REGISTRY_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'entries',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_managingDao', internalType: 'contract IDAO', type: 'address' },
      {
        name: '_subdomainRegistrar',
        internalType: 'contract ENSSubdomainRegistrar',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dao', internalType: 'contract IDAO', type: 'address' },
      { name: 'creator', internalType: 'address', type: 'address' },
      { name: 'subdomain', internalType: 'string', type: 'string' },
    ],
    name: 'register',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'subdomainRegistrar',
    outputs: [
      {
        name: '',
        internalType: 'contract ENSSubdomainRegistrar',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaceId',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DaoAuthorizableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoAuthorizableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712ABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712UpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ENS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ensABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'label',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NewOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'resolver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NewResolver',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'ttl', internalType: 'uint64', type: 'uint64', indexed: false },
    ],
    name: 'NewTTL',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'recordExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'resolver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'resolver', internalType: 'address', type: 'address' },
      { name: 'ttl', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setRecord',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resolver', internalType: 'address', type: 'address' },
    ],
    name: 'setResolver',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'label', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'setSubnodeOwner',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'label', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'resolver', internalType: 'address', type: 'address' },
      { name: 'ttl', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setSubnodeRecord',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'ttl', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setTTL',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ttl',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ENSSubdomainRegistrar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ensSubdomainRegistrarABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [
      { name: 'subnode', internalType: 'bytes32', type: 'bytes32' },
      { name: 'nodeOwner', internalType: 'address', type: 'address' },
    ],
    name: 'AlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resolver', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidResolver',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_ENS_SUBDOMAIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REGISTRAR_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ens',
    outputs: [{ name: '', internalType: 'contract ENS', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_managingDao', internalType: 'contract IDAO', type: 'address' },
      { name: '_ens', internalType: 'contract ENS', type: 'address' },
      { name: '_node', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'node',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_label', internalType: 'bytes32', type: 'bytes32' },
      { name: '_targetAddress', internalType: 'address', type: 'address' },
    ],
    name: 'registerSubnode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'resolver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_resolver', internalType: 'address', type: 'address' }],
    name: 'setDefaultResolver',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165StorageUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165StorageUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967ProxyABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_logic', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Upgrade
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20BurnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20VotesABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20Votes.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20VotesUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20VotesUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20VotesUpgradeable.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const errorsABI = [
  { type: 'error', inputs: [], name: 'AddressCannotBeZero' },
  {
    type: 'error',
    inputs: [
      { name: 'addresses', internalType: 'uint256', type: 'uint256' },
      { name: 'values', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AddressesAmountMismatch',
  },
  { type: 'error', inputs: [], name: 'BurnAmountCannotBeZero' },
  { type: 'error', inputs: [], name: 'ContributionWindowClosed' },
  { type: 'error', inputs: [], name: 'DepositAmountCannotBeZero' },
  { type: 'error', inputs: [], name: 'DurationCannotBeLessThanCliff' },
  { type: 'error', inputs: [], name: 'DurationCannotBeZero' },
  {
    type: 'error',
    inputs: [{ name: 'exitFee', internalType: 'uint16', type: 'uint16' }],
    name: 'ExitFeeError',
  },
  {
    type: 'error',
    inputs: [{ name: 'fundingRate', internalType: 'uint16', type: 'uint16' }],
    name: 'FundingRateError',
  },
  { type: 'error', inputs: [], name: 'HatchNotCanceled' },
  { type: 'error', inputs: [], name: 'HatchNotOpen' },
  { type: 'error', inputs: [], name: 'HatchingAlreadyStarted' },
  { type: 'error', inputs: [], name: 'HatchingNotStarted' },
  { type: 'error', inputs: [], name: 'InitialReserveCannotBeZero' },
  { type: 'error', inputs: [], name: 'InitialSupplyCannotBeZero' },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficentBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requested', internalType: 'uint256', type: 'uint256' },
      { name: 'available', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientReserve',
  },
  {
    type: 'error',
    inputs: [{ name: 'what', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidGovernanceParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'value', internalType: 'uint32', type: 'uint32' }],
    name: 'InvalidPPMValue',
  },
  { type: 'error', inputs: [], name: 'MaxContributionReached' },
  { type: 'error', inputs: [], name: 'NoContribution' },
  {
    type: 'error',
    inputs: [
      { name: 'requested', internalType: 'uint256', type: 'uint256' },
      { name: 'available', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughVestedTokens',
  },
  {
    type: 'error',
    inputs: [
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'beneficiary', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyBeneficiary',
  },
  {
    type: 'error',
    inputs: [
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyOwner',
  },
  { type: 'error', inputs: [], name: 'OwnerCanNotContinuousBurn' },
  { type: 'error', inputs: [], name: 'OwnerCanNotContinuousMint' },
  { type: 'error', inputs: [], name: 'SlicePeriodCannotBeZero' },
  { type: 'error', inputs: [], name: 'TradingAlreadyOpened' },
  {
    type: 'error',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'TransferFailed',
  },
  { type: 'error', inputs: [], name: 'VestingScheduleNotInitialized' },
  { type: 'error', inputs: [], name: 'VestingScheduleNotRevocable' },
  { type: 'error', inputs: [], name: 'VestingScheduleRevoked' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Events
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eventsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'burner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'burned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reimburseAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'exitFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ContinuousBurn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minted',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'depositAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reserveAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fundingAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ContinuousMint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'hatcher',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Hatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'burnAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SponsoredBurn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'depositAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'minted',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SponsoredMint',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Foo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fooABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'id',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernanceBurnableERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governanceBurnableErc20ABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20VotesUpgradeable.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helpers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const helpersABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'userName', internalType: 'string', type: 'string' }],
    name: 'createNamedUser',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'userNum', internalType: 'uint256', type: 'uint256' }],
    name: 'createUsers',
    outputs: [
      { name: '', internalType: 'address payable[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getNextUserAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IABIResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iabiResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'contentType',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ABIChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'contentTypes', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ABI',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAddrResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAddrResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AddrChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addr',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAddressResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAddressResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'coinType',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'AddressChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'coinType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addr',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBondedToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBondedTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBondingCurve
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBondingCurveABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'continuousSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveRatio', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'getContinuousBurnRefund',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'depositAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'continuousSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveBalance', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveRatio', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'getContinuousMintReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IContentHashResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iContentHashResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'hash', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ContenthashChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'contenthash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDAO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const idaoABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_reference',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'callId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'execResults',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NativeTokenDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signatureValidator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SignatureValidatorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'interfaceId',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'callbackSelector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'magicNumber',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
    ],
    name: 'StandardCallbackRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'forwarder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TrustedForwarderSet',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_reference', internalType: 'string', type: 'string' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_callId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [
      { name: '', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' },
      { name: '_callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: '_magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'registerStandardCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_metadata', internalType: 'bytes', type: 'bytes' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_signatureValidator', internalType: 'address', type: 'address' },
    ],
    name: 'setSignatureValidator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_trustedForwarder', internalType: 'address', type: 'address' },
    ],
    name: 'setTrustedForwarder',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDNSRecordResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const idnsRecordResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'resource',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: 'record', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'DNSRecordChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'resource',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
    ],
    name: 'DNSRecordDeleted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resource', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'dnsRecord',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDNSZoneResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const idnsZoneResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'lastzonehash',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'zonehash',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'DNSZonehashChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'zonehash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEIP4824
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ieip4824ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoURI',
    outputs: [{ name: '_daoURI', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1271
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1271ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5267
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5267ABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5267Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5267UpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5805
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5805ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5805Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5805UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6372
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6372ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6372Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6372UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IExtendedResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iExtendedResolverABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'bytes', type: 'bytes' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'resolve',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IHatch
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iHatchABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'cancel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimVesting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'contribute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'hatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'refund',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IInterfaceResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iInterfaceResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'interfaceID',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: true,
      },
      {
        name: 'implementer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'InterfaceChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'interfaceImplementer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMajorityVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMajorityVotingABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'votingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [
      {
        name: '',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMembership
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMembershipABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'definingContract',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MembershipContractAnnounced',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INameResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iNameResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'NameChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPermissionCondition
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPermissionConditionABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: 'allowed', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPlugin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPluginRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginRepoABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_pluginSetupAddress', internalType: 'address', type: 'address' },
      { name: '_buildMetadata', internalType: 'bytes', type: 'bytes' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateReleaseMetadata',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProposal
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProposalABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPluginSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginSetupABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPubkeyResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPubkeyResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'x', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'y', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'PubkeyChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'pubkey',
    outputs: [
      { name: 'x', internalType: 'bytes32', type: 'bytes32' },
      { name: 'y', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITextResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTextResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'indexedKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'TextChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'text',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotesUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DAOParams
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoParamsABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DENOMINATOR_PPM',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IntegrationBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const integrationBaseABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DENOMINATOR_PPM',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAgents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'network', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'userName', internalType: 'string', type: 'string' }],
    name: 'createNamedUser',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'userNum', internalType: 'uint256', type: 'uint256' }],
    name: 'createUsers',
    outputs: [
      { name: '', internalType: 'address payable[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'deployContracts',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'deployDAO',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_depositAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'expectedPurchaseReturn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sellAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'expectedSaleReturn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getNextUserAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialMint', internalType: 'uint256', type: 'uint256' },
      { name: 'initialDeposit', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'hatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setupRepo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InterfaceBasedRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const interfaceBasedRegistryABI = [
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractAlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractERC165SupportInvalid',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractInterfaceInvalid',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REGISTRY_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'entries',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaceId',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MajorityVotingBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const majorityVotingBaseABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'DateOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'MinDurationOutOfBounds',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ProposalCreationForbidden',
  },
  {
    type: 'error',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'ProposalExecutionForbidden',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RatioOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'VoteCastForbidden',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'votingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingMode',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'supportThreshold',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minParticipation',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minDuration',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'minProposerVotingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingSettingsUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
      { name: '_startDate', internalType: 'uint64', type: 'uint64' },
      { name: '_endDate', internalType: 'uint64', type: 'uint64' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'createProposal',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: 'open', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      {
        name: 'parameters',
        internalType: 'struct MajorityVotingBase.ProposalParameters',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'startDate', internalType: 'uint64', type: 'uint64' },
          { name: 'endDate', internalType: 'uint64', type: 'uint64' },
          { name: 'snapshotBlock', internalType: 'uint64', type: 'uint64' },
          { name: 'minVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'tally',
        internalType: 'struct MajorityVotingBase.Tally',
        type: 'tuple',
        components: [
          { name: 'abstain', internalType: 'uint256', type: 'uint256' },
          { name: 'yes', internalType: 'uint256', type: 'uint256' },
          { name: 'no', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [
      {
        name: '',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDuration',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minProposerVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          {
            name: 'minProposerVotingPower',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'updateVotingSettings',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingMode',
    outputs: [
      {
        name: '',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketMaker
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketMakerABI = [
  { type: 'error', inputs: [], name: 'AddressCannotBeZero' },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  { type: 'error', inputs: [], name: 'DepositAmountCannotBeZero' },
  { type: 'error', inputs: [], name: 'HatchingAlreadyStarted' },
  { type: 'error', inputs: [], name: 'HatchingNotStarted' },
  { type: 'error', inputs: [], name: 'InitialReserveCannotBeZero' },
  {
    type: 'error',
    inputs: [{ name: 'what', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidGovernanceParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'value', internalType: 'uint32', type: 'uint32' }],
    name: 'InvalidPPMValue',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CONFIGURE_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DENOMINATOR_PPM',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HATCH_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bondedToken',
    outputs: [
      {
        name: '',
        internalType: 'contract GovernanceBurnableERC20',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'calculateBurn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'calculateMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'externalToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurveParameters',
    outputs: [
      {
        name: '',
        internalType: 'struct CurveParameters',
        type: 'tuple',
        components: [
          { name: 'theta', internalType: 'uint32', type: 'uint32' },
          { name: 'friction', internalType: 'uint32', type: 'uint32' },
          { name: 'reserveRatio', internalType: 'uint32', type: 'uint32' },
          {
            name: 'formula',
            internalType: 'contract IBondingCurve',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'fundingAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'hatchTo', internalType: 'address', type: 'address' },
    ],
    name: 'hatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dao_', internalType: 'contract IDAO', type: 'address' },
      {
        name: 'bondedToken_',
        internalType: 'contract GovernanceBurnableERC20',
        type: 'address',
      },
      {
        name: 'externalToken_',
        internalType: 'contract IERC20',
        type: 'address',
      },
      {
        name: 'curve_',
        internalType: 'struct CurveParameters',
        type: 'tuple',
        components: [
          { name: 'theta', internalType: 'uint32', type: 'uint32' },
          { name: 'friction', internalType: 'uint32', type: 'uint32' },
          { name: 'reserveRatio', internalType: 'uint32', type: 'uint32' },
          {
            name: 'formula',
            internalType: 'contract IBondingCurve',
            type: 'address',
          },
        ],
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isHatched',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveRatio',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'what', internalType: 'bytes32', type: 'bytes32' },
      { name: 'value', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setGovernance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'sponsoredBurn',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'sponsoredMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockBondedToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockBondedTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20Votes.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockUSDC
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockUsdcABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PRBTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const prbTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'err', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'Log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LogAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'LogArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'bool[]', type: 'bool[]', indexed: false },
    ],
    name: 'LogArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'LogArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'LogArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
    ],
    name: 'LogArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'LogArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'LogBytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'LogBytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'LogInt256',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LogNamedAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'LogNamedArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'bool[]', type: 'bool[]', indexed: false },
    ],
    name: 'LogNamedArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'LogNamedArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'LogNamedArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
    ],
    name: 'LogNamedArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'LogNamedArray',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'LogNamedBytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'LogNamedBytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'LogNamedInt256',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'LogNamedString',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogNamedUint256',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'LogString',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LogUint256',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PermissionLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permissionLibABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NO_CONDITION',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PermissionManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permissionManagerABI = [
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  { type: 'error', inputs: [], name: 'ConditionNotPresentForAnyAddress' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
      },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginCloneable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginCloneableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginRepoABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  { type: 'error', inputs: [], name: 'ConditionNotPresentForAnyAddress' },
  { type: 'error', inputs: [], name: 'EmptyReleaseMetadata' },
  { type: 'error', inputs: [], name: 'InvalidPluginSetupInterface' },
  {
    type: 'error',
    inputs: [
      { name: 'latestRelease', internalType: 'uint8', type: 'uint8' },
      { name: 'newRelease', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'InvalidReleaseIncrement',
  },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [
      { name: 'release', internalType: 'uint8', type: 'uint8' },
      { name: 'build', internalType: 'uint16', type: 'uint16' },
      { name: 'pluginSetup', internalType: 'address', type: 'address' },
    ],
    name: 'PluginSetupAlreadyInPreviousRelease',
  },
  { type: 'error', inputs: [], name: 'ReleaseDoesNotExist' },
  { type: 'error', inputs: [], name: 'ReleaseZeroNotAllowed' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'error',
    inputs: [{ name: 'versionHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'VersionHashDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'release', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'releaseMetadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'ReleaseMetadataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'release', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'build', internalType: 'uint16', type: 'uint16', indexed: false },
      {
        name: 'pluginSetup',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'buildMetadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'VersionCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAINTAINER_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REPO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_release', internalType: 'uint8', type: 'uint8' }],
    name: 'buildCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_pluginSetup', internalType: 'address', type: 'address' },
      { name: '_buildMetadata', internalType: 'bytes', type: 'bytes' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createVersion',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_pluginSetup', internalType: 'address', type: 'address' },
    ],
    name: 'getLatestVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_release', internalType: 'uint8', type: 'uint8' }],
    name: 'getLatestVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tagHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_tag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'getVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
      },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialOwner', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRelease',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateReleaseMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginRepoFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginRepoFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_pluginRepoRegistry',
        internalType: 'contract PluginRepoRegistry',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_subdomain', internalType: 'string', type: 'string' },
      { name: '_initialOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createPluginRepo',
    outputs: [
      { name: '', internalType: 'contract PluginRepo', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_subdomain', internalType: 'string', type: 'string' },
      { name: '_pluginSetup', internalType: 'address', type: 'address' },
      { name: '_maintainer', internalType: 'address', type: 'address' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
      { name: '_buildMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createPluginRepoWithFirstVersion',
    outputs: [
      {
        name: 'pluginRepo',
        internalType: 'contract PluginRepo',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pluginRepoBase',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pluginRepoRegistry',
    outputs: [
      {
        name: '',
        internalType: 'contract PluginRepoRegistry',
        type: 'address',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginRepoRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginRepoRegistryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractAlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractERC165SupportInvalid',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractInterfaceInvalid',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  { type: 'error', inputs: [], name: 'EmptyPluginRepoSubdomain' },
  {
    type: 'error',
    inputs: [{ name: 'subdomain', internalType: 'string', type: 'string' }],
    name: 'InvalidPluginSubdomain',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'subdomain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'pluginRepo',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PluginRepoRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_PLUGIN_REPO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REGISTRY_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'entries',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      {
        name: '_subdomainRegistrar',
        internalType: 'contract ENSSubdomainRegistrar',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'subdomain', internalType: 'string', type: 'string' },
      { name: 'pluginRepo', internalType: 'address', type: 'address' },
    ],
    name: 'registerPluginRepo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'subdomainRegistrar',
    outputs: [
      {
        name: '',
        internalType: 'contract ENSSubdomainRegistrar',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaceId',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginSetupABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginSetupProcessor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginSetupProcessorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_repoRegistry',
        internalType: 'contract PluginRepoRegistry',
        type: 'address',
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: 'plugin', internalType: 'address', type: 'address' }],
    name: 'IPluginNotSupported',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'currentAppliedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
      },
      { name: 'appliedSetupId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'InvalidAppliedSetupId',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'currentVersionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
      },
      {
        name: 'newVersionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'InvalidUpdateVersion',
  },
  { type: 'error', inputs: [], name: 'PluginAlreadyInstalled' },
  {
    type: 'error',
    inputs: [{ name: 'plugin', internalType: 'address', type: 'address' }],
    name: 'PluginNonupgradeable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proxy', internalType: 'address', type: 'address' },
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'PluginProxyUpgradeFailed',
  },
  { type: 'error', inputs: [], name: 'PluginRepoNonexistent' },
  {
    type: 'error',
    inputs: [
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'SetupAlreadyPrepared',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'SetupApplicationUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'SetupNotApplicable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'plugin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'preparedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'appliedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'InstallationApplied',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'preparedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'pluginSetupRepo',
        internalType: 'contract PluginRepo',
        type: 'address',
        indexed: true,
      },
      {
        name: 'versionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'plugin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: 'InstallationPrepared',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'plugin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'preparedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'UninstallationApplied',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'preparedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'pluginSetupRepo',
        internalType: 'contract PluginRepo',
        type: 'address',
        indexed: true,
      },
      {
        name: 'versionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
        indexed: false,
      },
      {
        name: 'setupPayload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
        indexed: false,
      },
    ],
    name: 'UninstallationPrepared',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'plugin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'preparedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'appliedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'UpdateApplied',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'preparedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'pluginSetupRepo',
        internalType: 'contract PluginRepo',
        type: 'address',
        indexed: true,
      },
      {
        name: 'versionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
        indexed: false,
      },
      {
        name: 'setupPayload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: 'initData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'UpdatePrepared',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'APPLY_INSTALLATION_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'APPLY_UNINSTALLATION_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'APPLY_UPDATE_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.ApplyInstallationParams',
        type: 'tuple',
        components: [
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              {
                name: 'pluginSetupRepo',
                internalType: 'contract PluginRepo',
                type: 'address',
              },
            ],
          },
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
          { name: 'helpersHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyInstallation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.ApplyUninstallationParams',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              {
                name: 'pluginSetupRepo',
                internalType: 'contract PluginRepo',
                type: 'address',
              },
            ],
          },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
    name: 'applyUninstallation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.ApplyUpdateParams',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              {
                name: 'pluginSetupRepo',
                internalType: 'contract PluginRepo',
                type: 'address',
              },
            ],
          },
          { name: 'initData', internalType: 'bytes', type: 'bytes' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
          { name: 'helpersHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyUpdate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.PrepareInstallationParams',
        type: 'tuple',
        components: [
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              {
                name: 'pluginSetupRepo',
                internalType: 'contract PluginRepo',
                type: 'address',
              },
            ],
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.PrepareUninstallationParams',
        type: 'tuple',
        components: [
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              {
                name: 'pluginSetupRepo',
                internalType: 'contract PluginRepo',
                type: 'address',
              },
            ],
          },
          {
            name: 'setupPayload',
            internalType: 'struct IPluginSetup.SetupPayload',
            type: 'tuple',
            components: [
              { name: 'plugin', internalType: 'address', type: 'address' },
              {
                name: 'currentHelpers',
                internalType: 'address[]',
                type: 'address[]',
              },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.PrepareUpdateParams',
        type: 'tuple',
        components: [
          {
            name: 'currentVersionTag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'newVersionTag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'pluginSetupRepo',
            internalType: 'contract PluginRepo',
            type: 'address',
          },
          {
            name: 'setupPayload',
            internalType: 'struct IPluginSetup.SetupPayload',
            type: 'tuple',
            components: [
              { name: 'plugin', internalType: 'address', type: 'address' },
              {
                name: 'currentHelpers',
                internalType: 'address[]',
                type: 'address[]',
              },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repoRegistry',
    outputs: [
      {
        name: '',
        internalType: 'contract PluginRepoRegistry',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'states',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      {
        name: 'currentAppliedSetupId',
        internalType: 'bytes32',
        type: 'bytes32',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'pluginInstallationId',
        internalType: 'bytes32',
        type: 'bytes32',
      },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'validatePreparedSetupId',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginUUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginUupsUpgradeableABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Power
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const powerABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProposalUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proposalUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuardUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Resolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const resolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'contentType',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ABIChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AddrChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'coinType',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'AddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'hash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'ContentChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'hash', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ContenthashChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'resource',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: 'record', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'DNSRecordChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'resource',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
    ],
    name: 'DNSRecordDeleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'lastzonehash',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'zonehash',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'DNSZonehashChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'interfaceID',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: true,
      },
      {
        name: 'implementer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'InterfaceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'NameChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'x', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'y', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'PubkeyChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'indexedKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'TextChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'contentTypes', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ABI',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addr',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'coinType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addr',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'delegate', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'content',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'contenthash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resource', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'dnsRecord',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'interfaceImplementer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'delegate', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedFor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nodehash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'multicallWithNodeCheck',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'multihash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'pubkey',
    outputs: [
      { name: 'x', internalType: 'bytes32', type: 'bytes32' },
      { name: 'y', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'bytes', type: 'bytes' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'resolve',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'contentType', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setABI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'coinType', internalType: 'uint256', type: 'uint256' },
      { name: 'a', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setAddr',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'setAddr',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setContent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setContenthash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setDnsrr',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' },
      { name: 'implementer', internalType: 'address', type: 'address' },
    ],
    name: 'setInterface',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setMultihash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
    name: 'setName',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'x', internalType: 'bytes32', type: 'bytes32' },
      { name: 'y', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPubkey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'key', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setText',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'text',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'zonehash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShortStrings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shortStringsABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SimpleHatch
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const simpleHatchABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'ContributionWindowClosed' },
  { type: 'error', inputs: [], name: 'HatchNotCanceled' },
  { type: 'error', inputs: [], name: 'HatchNotOpen' },
  { type: 'error', inputs: [], name: 'MaxContributionReached' },
  { type: 'error', inputs: [], name: 'NoContribution' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Contribute',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Refund',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'cancel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimVesting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'contribute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'hatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dao_', internalType: 'contract IDAO', type: 'address' },
      {
        name: 'params_',
        internalType: 'struct HatchParameters',
        type: 'tuple',
        components: [
          {
            name: 'externalToken',
            internalType: 'contract IERC20',
            type: 'address',
          },
          {
            name: 'bondedToken',
            internalType: 'contract IVotes',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract MarketMaker',
            type: 'address',
          },
          { name: 'initialPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'raised', internalType: 'uint256', type: 'uint256' },
          { name: 'minimumRaise', internalType: 'uint256', type: 'uint256' },
          { name: 'maximumRaise', internalType: 'uint256', type: 'uint256' },
          { name: 'hatchDeadline', internalType: 'uint256', type: 'uint256' },
          { name: 'status', internalType: 'enum HatchStatus', type: 'uint8' },
        ],
      },
      {
        name: 'schedule_',
        internalType: 'struct VestingSchedule',
        type: 'tuple',
        components: [
          { name: 'initialized', internalType: 'bool', type: 'bool' },
          { name: 'cliff', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          {
            name: 'slicePeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'amountTotal', internalType: 'uint256', type: 'uint256' },
          { name: 'released', internalType: 'uint256', type: 'uint256' },
          { name: 'revoked', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'refund',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DSTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dsTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HEVM_ADDRESS',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'address', type: 'address' },
      { name: 'b', internalType: 'address', type: 'address' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'string', type: 'string' },
      { name: 'b', internalType: 'string', type: 'string' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'address', type: 'address' },
      { name: 'b', internalType: 'address', type: 'address' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'bytes32', type: 'bytes32' },
      { name: 'b', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'bytes32', type: 'bytes32' },
      { name: 'b', internalType: 'bytes32', type: 'bytes32' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'string', type: 'string' },
      { name: 'b', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
    ],
    name: 'assertEq',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'bytes', type: 'bytes' },
      { name: 'b', internalType: 'bytes', type: 'bytes' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq0',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'bytes', type: 'bytes' },
      { name: 'b', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'assertEq0',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'bytes32', type: 'bytes32' },
      { name: 'b', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'assertEq32',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'bytes32', type: 'bytes32' },
      { name: 'b', internalType: 'bytes32', type: 'bytes32' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEq32',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertEqDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertEqDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEqDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertEqDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
    ],
    name: 'assertGe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertGe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertGeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertGeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
    ],
    name: 'assertGt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertGt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertGtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertGtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertGtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertLe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
    ],
    name: 'assertLe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertLeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertLeDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
    ],
    name: 'assertLt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertLt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertLtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertLtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'int256', type: 'int256' },
      { name: 'b', internalType: 'int256', type: 'int256' },
      { name: 'decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assertLtDecimal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'condition', internalType: 'bool', type: 'bool' }],
    name: 'assertTrue',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'condition', internalType: 'bool', type: 'bool' },
      { name: 'err', internalType: 'string', type: 'string' },
    ],
    name: 'assertTrue',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'bytes', type: 'bytes' },
      { name: 'b', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkEq0',
    outputs: [{ name: 'ok', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'fail',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Test
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TokenVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tokenVotingABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'DateOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'MinDurationOutOfBounds',
  },
  { type: 'error', inputs: [], name: 'NoVotingPower' },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ProposalCreationForbidden',
  },
  {
    type: 'error',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'ProposalExecutionForbidden',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RatioOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'VoteCastForbidden',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'definingContract',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MembershipContractAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'votingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingMode',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'supportThreshold',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minParticipation',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minDuration',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'minProposerVotingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingSettingsUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
      { name: '_startDate', internalType: 'uint64', type: 'uint64' },
      { name: '_endDate', internalType: 'uint64', type: 'uint64' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'createProposal',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: 'open', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      {
        name: 'parameters',
        internalType: 'struct MajorityVotingBase.ProposalParameters',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'startDate', internalType: 'uint64', type: 'uint64' },
          { name: 'endDate', internalType: 'uint64', type: 'uint64' },
          { name: 'snapshotBlock', internalType: 'uint64', type: 'uint64' },
          { name: 'minVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'tally',
        internalType: 'struct MajorityVotingBase.Tally',
        type: 'tuple',
        components: [
          { name: 'abstain', internalType: 'uint256', type: 'uint256' },
          { name: 'yes', internalType: 'uint256', type: 'uint256' },
          { name: 'no', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [
      {
        name: '',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVotingToken',
    outputs: [
      { name: '', internalType: 'contract IVotesUpgradeable', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          {
            name: 'minProposerVotingPower',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_token',
        internalType: 'contract IVotesUpgradeable',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDuration',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minProposerVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          {
            name: 'minProposerVotingPower',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'updateVotingSettings',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingMode',
    outputs: [
      {
        name: '',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const utilsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'userNum', internalType: 'uint256', type: 'uint256' }],
    name: 'createUsers',
    outputs: [
      { name: '', internalType: 'address payable[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getNextUserAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'numBlocks', internalType: 'uint256', type: 'uint256' }],
    name: 'mineBlocks',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vesting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vestingABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'AddressCannotBeZero' },
  { type: 'error', inputs: [], name: 'DurationCannotBeLessThanCliff' },
  { type: 'error', inputs: [], name: 'DurationCannotBeZero' },
  {
    type: 'error',
    inputs: [
      { name: 'requested', internalType: 'uint256', type: 'uint256' },
      { name: 'available', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientReserve',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requested', internalType: 'uint256', type: 'uint256' },
      { name: 'available', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughVestedTokens',
  },
  {
    type: 'error',
    inputs: [
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'beneficiary', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyBeneficiary',
  },
  {
    type: 'error',
    inputs: [
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyOwner',
  },
  { type: 'error', inputs: [], name: 'SlicePeriodCannotBeZero' },
  { type: 'error', inputs: [], name: 'VestingScheduleNotInitialized' },
  { type: 'error', inputs: [], name: 'VestingScheduleNotRevocable' },
  { type: 'error', inputs: [], name: 'VestingScheduleRevoked' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'computeReleasableAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegateTo', internalType: 'address', type: 'address' }],
    name: 'delegateVestedTokens',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSchedule',
    outputs: [
      {
        name: '',
        internalType: 'struct VestingSchedule',
        type: 'tuple',
        components: [
          { name: 'initialized', internalType: 'bool', type: 'bool' },
          { name: 'cliff', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          {
            name: 'slicePeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'amountTotal', internalType: 'uint256', type: 'uint256' },
          { name: 'released', internalType: 'uint256', type: 'uint256' },
          { name: 'revoked', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getToken',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getWithdrawableAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'admin_', internalType: 'address', type: 'address' },
      { name: 'beneficiary_', internalType: 'address', type: 'address' },
      { name: 'token_', internalType: 'address', type: 'address' },
      {
        name: 'schedule_',
        internalType: 'struct VestingSchedule',
        type: 'tuple',
        components: [
          { name: 'initialized', internalType: 'bool', type: 'bool' },
          { name: 'cliff', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          {
            name: 'slicePeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'amountTotal', internalType: 'uint256', type: 'uint256' },
          { name: 'released', internalType: 'uint256', type: 'uint256' },
          { name: 'revoked', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'release',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revokeTo', internalType: 'address', type: 'address' }],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newBeneficiary_', internalType: 'address', type: 'address' },
    ],
    name: 'transferVesting',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822Proxiable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlUpgradeableDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlUpgradeableGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlUpgradeableHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof accessControlUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: accessControlUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlUpgradeableGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        typeof accessControlUpgradeableABI,
        'grantRole',
        TMode
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlUpgradeableABI,
    'grantRole',
    TMode
  >({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlUpgradeableRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        typeof accessControlUpgradeableABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlUpgradeableABI,
    'renounceRole',
    TMode
  >({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlUpgradeableRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        typeof accessControlUpgradeableABI,
        'revokeRole',
        TMode
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlUpgradeableABI,
    'revokeRole',
    TMode
  >({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function usePrepareAccessControlUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAccessControlUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof accessControlUpgradeableABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorBondingCurveABI}__.
 */
export function useBancorBondingCurveRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bancorBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bancorBondingCurveABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorBondingCurveABI,
    ...config,
  } as UseContractReadConfig<
    typeof bancorBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorBondingCurveABI}__ and `functionName` set to `"calculatePurchaseReturn"`.
 */
export function useBancorBondingCurveCalculatePurchaseReturn<
  TFunctionName extends 'calculatePurchaseReturn',
  TSelectData = ReadContractResult<typeof bancorBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bancorBondingCurveABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorBondingCurveABI,
    functionName: 'calculatePurchaseReturn',
    ...config,
  } as UseContractReadConfig<
    typeof bancorBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorBondingCurveABI}__ and `functionName` set to `"calculateSaleReturn"`.
 */
export function useBancorBondingCurveCalculateSaleReturn<
  TFunctionName extends 'calculateSaleReturn',
  TSelectData = ReadContractResult<typeof bancorBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bancorBondingCurveABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorBondingCurveABI,
    functionName: 'calculateSaleReturn',
    ...config,
  } as UseContractReadConfig<
    typeof bancorBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorBondingCurveABI}__ and `functionName` set to `"getContinuousBurnRefund"`.
 */
export function useBancorBondingCurveGetContinuousBurnRefund<
  TFunctionName extends 'getContinuousBurnRefund',
  TSelectData = ReadContractResult<typeof bancorBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bancorBondingCurveABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorBondingCurveABI,
    functionName: 'getContinuousBurnRefund',
    ...config,
  } as UseContractReadConfig<
    typeof bancorBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorBondingCurveABI}__ and `functionName` set to `"getContinuousMintReward"`.
 */
export function useBancorBondingCurveGetContinuousMintReward<
  TFunctionName extends 'getContinuousMintReward',
  TSelectData = ReadContractResult<typeof bancorBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bancorBondingCurveABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorBondingCurveABI,
    functionName: 'getContinuousMintReward',
    ...config,
  } as UseContractReadConfig<
    typeof bancorBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorBondingCurveABI}__ and `functionName` set to `"version"`.
 */
export function useBancorBondingCurveVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof bancorBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bancorBondingCurveABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorBondingCurveABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof bancorBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorFormulaABI}__.
 */
export function useBancorFormulaRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bancorFormulaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bancorFormulaABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorFormulaABI,
    ...config,
  } as UseContractReadConfig<
    typeof bancorFormulaABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorFormulaABI}__ and `functionName` set to `"calculatePurchaseReturn"`.
 */
export function useBancorFormulaCalculatePurchaseReturn<
  TFunctionName extends 'calculatePurchaseReturn',
  TSelectData = ReadContractResult<typeof bancorFormulaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bancorFormulaABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorFormulaABI,
    functionName: 'calculatePurchaseReturn',
    ...config,
  } as UseContractReadConfig<
    typeof bancorFormulaABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorFormulaABI}__ and `functionName` set to `"calculateSaleReturn"`.
 */
export function useBancorFormulaCalculateSaleReturn<
  TFunctionName extends 'calculateSaleReturn',
  TSelectData = ReadContractResult<typeof bancorFormulaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bancorFormulaABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorFormulaABI,
    functionName: 'calculateSaleReturn',
    ...config,
  } as UseContractReadConfig<
    typeof bancorFormulaABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bancorFormulaABI}__ and `functionName` set to `"version"`.
 */
export function useBancorFormulaVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof bancorFormulaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bancorFormulaABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bancorFormulaABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof bancorFormulaABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link callbackHandlerABI}__.
 */
export function useCallbackHandlerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof callbackHandlerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: callbackHandlerABI,
    ...config,
  } as UseContractEventConfig<typeof callbackHandlerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link callbackHandlerABI}__ and `eventName` set to `"CallbackReceived"`.
 */
export function useCallbackHandlerCallbackReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof callbackHandlerABI, 'CallbackReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: callbackHandlerABI,
    eventName: 'CallbackReceived',
    ...config,
  } as UseContractEventConfig<typeof callbackHandlerABI, 'CallbackReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link continuousDaoSetupABI}__.
 */
export function useContinuousDaoSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof continuousDaoSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof continuousDaoSetupABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: continuousDaoSetupABI,
    ...config,
  } as UseContractReadConfig<
    typeof continuousDaoSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function useContinuousDaoSetupImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof continuousDaoSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof continuousDaoSetupABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: continuousDaoSetupABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof continuousDaoSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function useContinuousDaoSetupPrepareUninstallation<
  TFunctionName extends 'prepareUninstallation',
  TSelectData = ReadContractResult<typeof continuousDaoSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof continuousDaoSetupABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: continuousDaoSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UseContractReadConfig<
    typeof continuousDaoSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useContinuousDaoSetupSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof continuousDaoSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof continuousDaoSetupABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: continuousDaoSetupABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof continuousDaoSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link continuousDaoSetupABI}__.
 */
export function useContinuousDaoSetupWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof continuousDaoSetupABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof continuousDaoSetupABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof continuousDaoSetupABI, TFunctionName, TMode>({
    abi: continuousDaoSetupABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function useContinuousDaoSetupPrepareInstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof continuousDaoSetupABI,
          'prepareInstallation'
        >['request']['abi'],
        'prepareInstallation',
        TMode
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<
        typeof continuousDaoSetupABI,
        'prepareInstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<
    typeof continuousDaoSetupABI,
    'prepareInstallation',
    TMode
  >({
    abi: continuousDaoSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function useContinuousDaoSetupPrepareUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof continuousDaoSetupABI,
          'prepareUpdate'
        >['request']['abi'],
        'prepareUpdate',
        TMode
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<
        typeof continuousDaoSetupABI,
        'prepareUpdate',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof continuousDaoSetupABI, 'prepareUpdate', TMode>(
    {
      abi: continuousDaoSetupABI,
      functionName: 'prepareUpdate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link continuousDaoSetupABI}__.
 */
export function usePrepareContinuousDaoSetupWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof continuousDaoSetupABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: continuousDaoSetupABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof continuousDaoSetupABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePrepareContinuousDaoSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof continuousDaoSetupABI,
      'prepareInstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: continuousDaoSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof continuousDaoSetupABI,
    'prepareInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePrepareContinuousDaoSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof continuousDaoSetupABI,
      'prepareUpdate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: continuousDaoSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof continuousDaoSetupABI,
    'prepareUpdate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link continuousDaoSetupABI}__.
 */
export function useContinuousDaoSetupEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof continuousDaoSetupABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: continuousDaoSetupABI,
    ...config,
  } as UseContractEventConfig<typeof continuousDaoSetupABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link continuousDaoSetupABI}__ and `eventName` set to `"DeployedContracts"`.
 */
export function useContinuousDaoSetupDeployedContractsEvent(
  config: Omit<
    UseContractEventConfig<typeof continuousDaoSetupABI, 'DeployedContracts'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: continuousDaoSetupABI,
    eventName: 'DeployedContracts',
    ...config,
  } as UseContractEventConfig<
    typeof continuousDaoSetupABI,
    'DeployedContracts'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__.
 */
export function useDaoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: daoABI, ...config } as UseContractReadConfig<
    typeof daoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"EXECUTE_PERMISSION_ID"`.
 */
export function useDaoExecutePermissionId<
  TFunctionName extends 'EXECUTE_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'EXECUTE_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"REGISTER_STANDARD_CALLBACK_PERMISSION_ID"`.
 */
export function useDaoRegisterStandardCallbackPermissionId<
  TFunctionName extends 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 */
export function useDaoRootPermissionId<
  TFunctionName extends 'ROOT_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_METADATA_PERMISSION_ID"`.
 */
export function useDaoSetMetadataPermissionId<
  TFunctionName extends 'SET_METADATA_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'SET_METADATA_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_SIGNATURE_VALIDATOR_PERMISSION_ID"`.
 */
export function useDaoSetSignatureValidatorPermissionId<
  TFunctionName extends 'SET_SIGNATURE_VALIDATOR_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'SET_SIGNATURE_VALIDATOR_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_TRUSTED_FORWARDER_PERMISSION_ID"`.
 */
export function useDaoSetTrustedForwarderPermissionId<
  TFunctionName extends 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"UPGRADE_DAO_PERMISSION_ID"`.
 */
export function useDaoUpgradeDaoPermissionId<
  TFunctionName extends 'UPGRADE_DAO_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'UPGRADE_DAO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"daoURI"`.
 */
export function useDaoDaoUri<
  TFunctionName extends 'daoURI',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'daoURI',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useDaoGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"hasPermission"`.
 */
export function useDaoHasPermission<
  TFunctionName extends 'hasPermission',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'hasPermission',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"isGranted"`.
 */
export function useDaoIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useDaoIsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useDaoProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"signatureValidator"`.
 */
export function useDaoSignatureValidator<
  TFunctionName extends 'signatureValidator',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'signatureValidator',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDaoSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__.
 */
export function useDaoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof daoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, TFunctionName, TMode>({
    abi: daoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function useDaoApplyMultiTargetPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'applyMultiTargetPermissions'
        >['request']['abi'],
        'applyMultiTargetPermissions',
        TMode
      > & { functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<
        typeof daoABI,
        'applyMultiTargetPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'applyMultiTargetPermissions', TMode>({
    abi: daoABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function useDaoApplySingleTargetPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'applySingleTargetPermissions'
        >['request']['abi'],
        'applySingleTargetPermissions',
        TMode
      > & { functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<
        typeof daoABI,
        'applySingleTargetPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'applySingleTargetPermissions', TMode>(
    {
      abi: daoABI,
      functionName: 'applySingleTargetPermissions',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"deposit"`.
 */
export function useDaoDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof daoABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'deposit', TMode>({
    abi: daoABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"execute"`.
 */
export function useDaoExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof daoABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'execute', TMode>({
    abi: daoABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grant"`.
 */
export function useDaoGrant<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'grant'>['request']['abi'],
        'grant',
        TMode
      > & { functionName?: 'grant' }
    : UseContractWriteConfig<typeof daoABI, 'grant', TMode> & {
        abi?: never
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'grant', TMode>({
    abi: daoABI,
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function useDaoGrantWithCondition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'grantWithCondition'
        >['request']['abi'],
        'grantWithCondition',
        TMode
      > & { functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<typeof daoABI, 'grantWithCondition', TMode> & {
        abi?: never
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'grantWithCondition', TMode>({
    abi: daoABI,
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initialize"`.
 */
export function useDaoInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof daoABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'initialize', TMode>({
    abi: daoABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initializeFrom"`.
 */
export function useDaoInitializeFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'initializeFrom'
        >['request']['abi'],
        'initializeFrom',
        TMode
      > & { functionName?: 'initializeFrom' }
    : UseContractWriteConfig<typeof daoABI, 'initializeFrom', TMode> & {
        abi?: never
        functionName?: 'initializeFrom'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'initializeFrom', TMode>({
    abi: daoABI,
    functionName: 'initializeFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function useDaoRegisterStandardCallback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'registerStandardCallback'
        >['request']['abi'],
        'registerStandardCallback',
        TMode
      > & { functionName?: 'registerStandardCallback' }
    : UseContractWriteConfig<
        typeof daoABI,
        'registerStandardCallback',
        TMode
      > & {
        abi?: never
        functionName?: 'registerStandardCallback'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'registerStandardCallback', TMode>({
    abi: daoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"revoke"`.
 */
export function useDaoRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof daoABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'revoke', TMode>({
    abi: daoABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setDaoURI"`.
 */
export function useDaoSetDaoUri<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'setDaoURI'
        >['request']['abi'],
        'setDaoURI',
        TMode
      > & { functionName?: 'setDaoURI' }
    : UseContractWriteConfig<typeof daoABI, 'setDaoURI', TMode> & {
        abi?: never
        functionName?: 'setDaoURI'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'setDaoURI', TMode>({
    abi: daoABI,
    functionName: 'setDaoURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function useDaoSetMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'setMetadata'
        >['request']['abi'],
        'setMetadata',
        TMode
      > & { functionName?: 'setMetadata' }
    : UseContractWriteConfig<typeof daoABI, 'setMetadata', TMode> & {
        abi?: never
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'setMetadata', TMode>({
    abi: daoABI,
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function useDaoSetSignatureValidator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'setSignatureValidator'
        >['request']['abi'],
        'setSignatureValidator',
        TMode
      > & { functionName?: 'setSignatureValidator' }
    : UseContractWriteConfig<typeof daoABI, 'setSignatureValidator', TMode> & {
        abi?: never
        functionName?: 'setSignatureValidator'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'setSignatureValidator', TMode>({
    abi: daoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useDaoSetTrustedForwarder<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'setTrustedForwarder'
        >['request']['abi'],
        'setTrustedForwarder',
        TMode
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<typeof daoABI, 'setTrustedForwarder', TMode> & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'setTrustedForwarder', TMode>({
    abi: daoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useDaoUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof daoABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'upgradeTo', TMode>({
    abi: daoABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useDaoUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof daoABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'upgradeToAndCall', TMode>({
    abi: daoABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__.
 */
export function usePrepareDaoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePrepareDaoApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'applyMultiTargetPermissions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof daoABI,
    'applyMultiTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePrepareDaoApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof daoABI,
      'applySingleTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof daoABI,
    'applySingleTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareDaoDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareDaoExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grant"`.
 */
export function usePrepareDaoGrant(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'grant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePrepareDaoGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'grantWithCondition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'grantWithCondition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDaoInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initializeFrom"`.
 */
export function usePrepareDaoInitializeFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'initializeFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'initializeFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'initializeFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function usePrepareDaoRegisterStandardCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'registerStandardCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'registerStandardCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareDaoRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setDaoURI"`.
 */
export function usePrepareDaoSetDaoUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setDaoURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setDaoURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setDaoURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function usePrepareDaoSetMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function usePrepareDaoSetSignatureValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setSignatureValidator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setSignatureValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareDaoSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setTrustedForwarder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setTrustedForwarder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareDaoUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareDaoUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__.
 */
export function useDaoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof daoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: daoABI, ...config } as UseContractEventConfig<
    typeof daoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useDaoAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useDaoBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"CallbackReceived"`.
 */
export function useDaoCallbackReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'CallbackReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'CallbackReceived',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'CallbackReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Deposited"`.
 */
export function useDaoDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Executed"`.
 */
export function useDaoExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Executed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Executed',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Executed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Granted"`.
 */
export function useDaoGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Granted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Granted',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Granted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDaoInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"MetadataSet"`.
 */
export function useDaoMetadataSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'MetadataSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'MetadataSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'MetadataSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"NativeTokenDeposited"`.
 */
export function useDaoNativeTokenDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'NativeTokenDeposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'NativeTokenDeposited',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'NativeTokenDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"NewURI"`.
 */
export function useDaoNewUriEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'NewURI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'NewURI',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'NewURI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Revoked"`.
 */
export function useDaoRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Revoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"SignatureValidatorSet"`.
 */
export function useDaoSignatureValidatorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'SignatureValidatorSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'SignatureValidatorSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'SignatureValidatorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"StandardCallbackRegistered"`.
 */
export function useDaoStandardCallbackRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'StandardCallbackRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'StandardCallbackRegistered',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'StandardCallbackRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"TrustedForwarderSet"`.
 */
export function useDaoTrustedForwarderSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'TrustedForwarderSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'TrustedForwarderSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'TrustedForwarderSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useDaoUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoFactoryABI}__.
 */
export function useDaoFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: daoFactoryABI,
    ...config,
  } as UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoFactoryABI}__ and `functionName` set to `"daoBase"`.
 */
export function useDaoFactoryDaoBase<
  TFunctionName extends 'daoBase',
  TSelectData = ReadContractResult<typeof daoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoFactoryABI,
    functionName: 'daoBase',
    ...config,
  } as UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoFactoryABI}__ and `functionName` set to `"daoRegistry"`.
 */
export function useDaoFactoryDaoRegistry<
  TFunctionName extends 'daoRegistry',
  TSelectData = ReadContractResult<typeof daoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoFactoryABI,
    functionName: 'daoRegistry',
    ...config,
  } as UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoFactoryABI}__ and `functionName` set to `"pluginSetupProcessor"`.
 */
export function useDaoFactoryPluginSetupProcessor<
  TFunctionName extends 'pluginSetupProcessor',
  TSelectData = ReadContractResult<typeof daoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoFactoryABI,
    functionName: 'pluginSetupProcessor',
    ...config,
  } as UseContractReadConfig<typeof daoFactoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoFactoryABI}__.
 */
export function useDaoFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof daoFactoryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof daoFactoryABI, TFunctionName, TMode>({
    abi: daoFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoFactoryABI}__ and `functionName` set to `"createDao"`.
 */
export function useDaoFactoryCreateDao<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoFactoryABI,
          'createDao'
        >['request']['abi'],
        'createDao',
        TMode
      > & { functionName?: 'createDao' }
    : UseContractWriteConfig<typeof daoFactoryABI, 'createDao', TMode> & {
        abi?: never
        functionName?: 'createDao'
      } = {} as any,
) {
  return useContractWrite<typeof daoFactoryABI, 'createDao', TMode>({
    abi: daoFactoryABI,
    functionName: 'createDao',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoFactoryABI}__.
 */
export function usePrepareDaoFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoFactoryABI}__ and `functionName` set to `"createDao"`.
 */
export function usePrepareDaoFactoryCreateDao(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoFactoryABI, 'createDao'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoFactoryABI,
    functionName: 'createDao',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoFactoryABI, 'createDao'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__.
 */
export function useDaoRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"REGISTER_DAO_PERMISSION_ID"`.
 */
export function useDaoRegistryRegisterDaoPermissionId<
  TFunctionName extends 'REGISTER_DAO_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    functionName: 'REGISTER_DAO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"UPGRADE_REGISTRY_PERMISSION_ID"`.
 */
export function useDaoRegistryUpgradeRegistryPermissionId<
  TFunctionName extends 'UPGRADE_REGISTRY_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    functionName: 'UPGRADE_REGISTRY_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"dao"`.
 */
export function useDaoRegistryDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"entries"`.
 */
export function useDaoRegistryEntries<
  TFunctionName extends 'entries',
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    functionName: 'entries',
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useDaoRegistryProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"subdomainRegistrar"`.
 */
export function useDaoRegistrySubdomainRegistrar<
  TFunctionName extends 'subdomainRegistrar',
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    functionName: 'subdomainRegistrar',
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"targetInterfaceId"`.
 */
export function useDaoRegistryTargetInterfaceId<
  TFunctionName extends 'targetInterfaceId',
  TSelectData = ReadContractResult<typeof daoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoRegistryABI,
    functionName: 'targetInterfaceId',
    ...config,
  } as UseContractReadConfig<typeof daoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoRegistryABI}__.
 */
export function useDaoRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoRegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof daoRegistryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof daoRegistryABI, TFunctionName, TMode>({
    abi: daoRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function useDaoRegistryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoRegistryABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof daoRegistryABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof daoRegistryABI, 'initialize', TMode>({
    abi: daoRegistryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"register"`.
 */
export function useDaoRegistryRegister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoRegistryABI,
          'register'
        >['request']['abi'],
        'register',
        TMode
      > & { functionName?: 'register' }
    : UseContractWriteConfig<typeof daoRegistryABI, 'register', TMode> & {
        abi?: never
        functionName?: 'register'
      } = {} as any,
) {
  return useContractWrite<typeof daoRegistryABI, 'register', TMode>({
    abi: daoRegistryABI,
    functionName: 'register',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useDaoRegistryUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoRegistryABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof daoRegistryABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof daoRegistryABI, 'upgradeTo', TMode>({
    abi: daoRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useDaoRegistryUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoRegistryABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof daoRegistryABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof daoRegistryABI, 'upgradeToAndCall', TMode>({
    abi: daoRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoRegistryABI}__.
 */
export function usePrepareDaoRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoRegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDaoRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoRegistryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoRegistryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoRegistryABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"register"`.
 */
export function usePrepareDaoRegistryRegister(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoRegistryABI, 'register'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoRegistryABI,
    functionName: 'register',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoRegistryABI, 'register'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareDaoRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoRegistryABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoRegistryABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareDaoRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoRegistryABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoRegistryABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoRegistryABI}__.
 */
export function useDaoRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof daoRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof daoRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useDaoRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof daoRegistryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useDaoRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoRegistryABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof daoRegistryABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoRegistryABI}__ and `eventName` set to `"DAORegistered"`.
 */
export function useDaoRegistryDaoRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof daoRegistryABI, 'DAORegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoRegistryABI,
    eventName: 'DAORegistered',
    ...config,
  } as UseContractEventConfig<typeof daoRegistryABI, 'DAORegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDaoRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof daoRegistryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useDaoRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoRegistryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof daoRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__.
 */
export function useDaoAuthorizableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof daoAuthorizableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoAuthorizableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: daoAuthorizableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof daoAuthorizableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__ and `functionName` set to `"dao"`.
 */
export function useDaoAuthorizableUpgradeableDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<
    typeof daoAuthorizableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoAuthorizableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoAuthorizableUpgradeableABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof daoAuthorizableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__.
 */
export function useDaoAuthorizableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoAuthorizableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDaoAuthorizableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoAuthorizableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof daoAuthorizableUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: eip712ABI, ...config } as UseContractReadConfig<
    typeof eip712ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useEip712Eip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eip712ABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof eip712ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: eip712ABI,
    ...config,
  } as UseContractEventConfig<typeof eip712ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useEip712Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eip712ABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eip712UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof eip712UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: eip712UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof eip712UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useEip712UpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof eip712UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof eip712UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eip712UpgradeableABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<
    typeof eip712UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof eip712UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useEip712UpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<
    typeof eip712UpgradeableABI,
    'EIP712DomainChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useEip712UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__.
 */
export function useEnsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ensABI, ...config } as UseContractReadConfig<
    typeof ensABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useEnsIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"owner"`.
 */
export function useEnsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"recordExists"`.
 */
export function useEnsRecordExists<
  TFunctionName extends 'recordExists',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensABI,
    functionName: 'recordExists',
    ...config,
  } as UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"resolver"`.
 */
export function useEnsResolver<
  TFunctionName extends 'resolver',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensABI,
    functionName: 'resolver',
    ...config,
  } as UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"ttl"`.
 */
export function useEnsTtl<
  TFunctionName extends 'ttl',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensABI,
    functionName: 'ttl',
    ...config,
  } as UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__.
 */
export function useEnsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ensABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, TFunctionName, TMode>({
    abi: ensABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useEnsSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ensABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setApprovalForAll', TMode>({
    abi: ensABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setOwner"`.
 */
export function useEnsSetOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setOwner'>['request']['abi'],
        'setOwner',
        TMode
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<typeof ensABI, 'setOwner', TMode> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setOwner', TMode>({
    abi: ensABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setRecord"`.
 */
export function useEnsSetRecord<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensABI,
          'setRecord'
        >['request']['abi'],
        'setRecord',
        TMode
      > & { functionName?: 'setRecord' }
    : UseContractWriteConfig<typeof ensABI, 'setRecord', TMode> & {
        abi?: never
        functionName?: 'setRecord'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setRecord', TMode>({
    abi: ensABI,
    functionName: 'setRecord',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setResolver"`.
 */
export function useEnsSetResolver<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensABI,
          'setResolver'
        >['request']['abi'],
        'setResolver',
        TMode
      > & { functionName?: 'setResolver' }
    : UseContractWriteConfig<typeof ensABI, 'setResolver', TMode> & {
        abi?: never
        functionName?: 'setResolver'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setResolver', TMode>({
    abi: ensABI,
    functionName: 'setResolver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeOwner"`.
 */
export function useEnsSetSubnodeOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensABI,
          'setSubnodeOwner'
        >['request']['abi'],
        'setSubnodeOwner',
        TMode
      > & { functionName?: 'setSubnodeOwner' }
    : UseContractWriteConfig<typeof ensABI, 'setSubnodeOwner', TMode> & {
        abi?: never
        functionName?: 'setSubnodeOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setSubnodeOwner', TMode>({
    abi: ensABI,
    functionName: 'setSubnodeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeRecord"`.
 */
export function useEnsSetSubnodeRecord<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensABI,
          'setSubnodeRecord'
        >['request']['abi'],
        'setSubnodeRecord',
        TMode
      > & { functionName?: 'setSubnodeRecord' }
    : UseContractWriteConfig<typeof ensABI, 'setSubnodeRecord', TMode> & {
        abi?: never
        functionName?: 'setSubnodeRecord'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setSubnodeRecord', TMode>({
    abi: ensABI,
    functionName: 'setSubnodeRecord',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setTTL"`.
 */
export function useEnsSetTtl<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setTTL'>['request']['abi'],
        'setTTL',
        TMode
      > & { functionName?: 'setTTL' }
    : UseContractWriteConfig<typeof ensABI, 'setTTL', TMode> & {
        abi?: never
        functionName?: 'setTTL'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setTTL', TMode>({
    abi: ensABI,
    functionName: 'setTTL',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__.
 */
export function usePrepareEnsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareEnsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareEnsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setRecord"`.
 */
export function usePrepareEnsSetRecord(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, 'setRecord'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setRecord',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setRecord'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setResolver"`.
 */
export function usePrepareEnsSetResolver(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, 'setResolver'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setResolver',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setResolver'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeOwner"`.
 */
export function usePrepareEnsSetSubnodeOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setSubnodeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeRecord"`.
 */
export function usePrepareEnsSetSubnodeRecord(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeRecord'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setSubnodeRecord',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeRecord'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setTTL"`.
 */
export function usePrepareEnsSetTtl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensABI, 'setTTL'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setTTL',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setTTL'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__.
 */
export function useEnsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ensABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: ensABI, ...config } as UseContractEventConfig<
    typeof ensABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useEnsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ensABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ensABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"NewOwner"`.
 */
export function useEnsNewOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ensABI, 'NewOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensABI,
    eventName: 'NewOwner',
    ...config,
  } as UseContractEventConfig<typeof ensABI, 'NewOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"NewResolver"`.
 */
export function useEnsNewResolverEvent(
  config: Omit<
    UseContractEventConfig<typeof ensABI, 'NewResolver'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensABI,
    eventName: 'NewResolver',
    ...config,
  } as UseContractEventConfig<typeof ensABI, 'NewResolver'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"NewTTL"`.
 */
export function useEnsNewTtlEvent(
  config: Omit<
    UseContractEventConfig<typeof ensABI, 'NewTTL'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensABI,
    eventName: 'NewTTL',
    ...config,
  } as UseContractEventConfig<typeof ensABI, 'NewTTL'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"Transfer"`.
 */
export function useEnsTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ensABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ensABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function useEnsSubdomainRegistrarRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"REGISTER_ENS_SUBDOMAIN_PERMISSION_ID"`.
 */
export function useEnsSubdomainRegistrarRegisterEnsSubdomainPermissionId<
  TFunctionName extends 'REGISTER_ENS_SUBDOMAIN_PERMISSION_ID',
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'REGISTER_ENS_SUBDOMAIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"UPGRADE_REGISTRAR_PERMISSION_ID"`.
 */
export function useEnsSubdomainRegistrarUpgradeRegistrarPermissionId<
  TFunctionName extends 'UPGRADE_REGISTRAR_PERMISSION_ID',
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'UPGRADE_REGISTRAR_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"dao"`.
 */
export function useEnsSubdomainRegistrarDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"ens"`.
 */
export function useEnsSubdomainRegistrarEns<
  TFunctionName extends 'ens',
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'ens',
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"node"`.
 */
export function useEnsSubdomainRegistrarNode<
  TFunctionName extends 'node',
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'node',
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useEnsSubdomainRegistrarProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"resolver"`.
 */
export function useEnsSubdomainRegistrarResolver<
  TFunctionName extends 'resolver',
  TSelectData = ReadContractResult<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'resolver',
    ...config,
  } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function useEnsSubdomainRegistrarWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensSubdomainRegistrarABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ensSubdomainRegistrarABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TMode
  >({ abi: ensSubdomainRegistrarABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"initialize"`.
 */
export function useEnsSubdomainRegistrarInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensSubdomainRegistrarABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof ensSubdomainRegistrarABI,
        'initialize',
        TMode
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, 'initialize', TMode>(
    {
      abi: ensSubdomainRegistrarABI,
      functionName: 'initialize',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"registerSubnode"`.
 */
export function useEnsSubdomainRegistrarRegisterSubnode<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensSubdomainRegistrarABI,
          'registerSubnode'
        >['request']['abi'],
        'registerSubnode',
        TMode
      > & { functionName?: 'registerSubnode' }
    : UseContractWriteConfig<
        typeof ensSubdomainRegistrarABI,
        'registerSubnode',
        TMode
      > & {
        abi?: never
        functionName?: 'registerSubnode'
      } = {} as any,
) {
  return useContractWrite<
    typeof ensSubdomainRegistrarABI,
    'registerSubnode',
    TMode
  >({
    abi: ensSubdomainRegistrarABI,
    functionName: 'registerSubnode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"setDefaultResolver"`.
 */
export function useEnsSubdomainRegistrarSetDefaultResolver<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensSubdomainRegistrarABI,
          'setDefaultResolver'
        >['request']['abi'],
        'setDefaultResolver',
        TMode
      > & { functionName?: 'setDefaultResolver' }
    : UseContractWriteConfig<
        typeof ensSubdomainRegistrarABI,
        'setDefaultResolver',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultResolver'
      } = {} as any,
) {
  return useContractWrite<
    typeof ensSubdomainRegistrarABI,
    'setDefaultResolver',
    TMode
  >({
    abi: ensSubdomainRegistrarABI,
    functionName: 'setDefaultResolver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useEnsSubdomainRegistrarUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensSubdomainRegistrarABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof ensSubdomainRegistrarABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, 'upgradeTo', TMode>({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useEnsSubdomainRegistrarUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ensSubdomainRegistrarABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof ensSubdomainRegistrarABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof ensSubdomainRegistrarABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function usePrepareEnsSubdomainRegistrarWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ensSubdomainRegistrarABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareEnsSubdomainRegistrarInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ensSubdomainRegistrarABI,
      'initialize'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ensSubdomainRegistrarABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"registerSubnode"`.
 */
export function usePrepareEnsSubdomainRegistrarRegisterSubnode(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ensSubdomainRegistrarABI,
      'registerSubnode'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'registerSubnode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ensSubdomainRegistrarABI,
    'registerSubnode'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"setDefaultResolver"`.
 */
export function usePrepareEnsSubdomainRegistrarSetDefaultResolver(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ensSubdomainRegistrarABI,
      'setDefaultResolver'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'setDefaultResolver',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ensSubdomainRegistrarABI,
    'setDefaultResolver'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareEnsSubdomainRegistrarUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ensSubdomainRegistrarABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareEnsSubdomainRegistrarUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ensSubdomainRegistrarABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ensSubdomainRegistrarABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function useEnsSubdomainRegistrarEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ensSubdomainRegistrarABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    ...config,
  } as UseContractEventConfig<typeof ensSubdomainRegistrarABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useEnsSubdomainRegistrarAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useEnsSubdomainRegistrarBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof ensSubdomainRegistrarABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"Initialized"`.
 */
export function useEnsSubdomainRegistrarInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useEnsSubdomainRegistrarUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__.
 */
export function useErc165StorageUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc165StorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165StorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165StorageUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc165StorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165StorageUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof erc165StorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165StorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165StorageUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165StorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__.
 */
export function useErc165StorageUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165StorageUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165StorageUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc165StorageUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165StorageUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165StorageUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165StorageUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc165StorageUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__.
 */
export function useErc1967ProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967ProxyAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967ProxyBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967ProxyUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc1967UpgradeUpgradeableABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20BurnableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, TFunctionName, TMode>({
    abi: erc20BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, 'approve', TMode>({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, 'burn', TMode>({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, 'burnFrom', TMode>({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20BurnableABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, 'decreaseAllowance', TMode>({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20BurnableABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, 'increaseAllowance', TMode>({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, 'transfer', TMode>({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, 'transferFrom', TMode>({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967UpgradeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: erc20BurnableUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'approve', TMode>(
    {
      abi: erc20BurnableUpgradeableABI,
      functionName: 'approve',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableUpgradeableBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'burn', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableUpgradeableBurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        'burnFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20BurnableUpgradeableABI,
    'burnFrom',
    TMode
  >({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableUpgradeableDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20BurnableUpgradeableABI,
    'decreaseAllowance',
    TMode
  >({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableUpgradeableIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20BurnableUpgradeableABI,
    'increaseAllowance',
    TMode
  >({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableUpgradeableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20BurnableUpgradeableABI,
    'transfer',
    TMode
  >({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20BurnableUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20BurnableUpgradeableABI,
    'transferFrom',
    TMode
  >({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function usePrepareErc20BurnableUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20BurnableUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20BurnableUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableUpgradeableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableUpgradeableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20BurnableUpgradeableABI,
      'burnFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    'burnFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20BurnableUpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20BurnableUpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20BurnableUpgradeableABI,
      'transfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20BurnableUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20BurnableUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20BurnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc20BurnableUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20PermitEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20PermitABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitABI, TFunctionName, TMode>({
    abi: erc20PermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitABI, 'approve', TMode>({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20PermitABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitABI, 'decreaseAllowance', TMode>({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20PermitABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitABI, 'increaseAllowance', TMode>({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitABI, 'permit', TMode>({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitABI, 'transfer', TMode>({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitABI, 'transferFrom', TMode>({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function usePrepareErc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20PermitEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20PermitUpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20PermitUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: erc20PermitUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof erc20PermitUpgradeableABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'approve', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitUpgradeableDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20PermitUpgradeableABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PermitUpgradeableABI,
    'decreaseAllowance',
    TMode
  >({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitUpgradeableIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20PermitUpgradeableABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PermitUpgradeableABI,
    'increaseAllowance',
    TMode
  >({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitUpgradeablePermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        typeof erc20PermitUpgradeableABI,
        'permit',
        TMode
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'permit', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitUpgradeableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof erc20PermitUpgradeableABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'transfer', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20PermitUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PermitUpgradeableABI,
    'transferFrom',
    TMode
  >({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function usePrepareErc20PermitUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20PermitUpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20PermitUpgradeableABI,
      'EIP712DomainChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc20PermitUpgradeableABI,
    'EIP712DomainChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20PermitUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20UpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20UpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20UpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20UpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20UpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20UpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20UpgradeableABI, TFunctionName, TMode>({
    abi: erc20UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20UpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'approve', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20UpgradeableDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20UpgradeableABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20UpgradeableABI,
    'decreaseAllowance',
    TMode
  >({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20UpgradeableIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20UpgradeableABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20UpgradeableABI,
    'increaseAllowance',
    TMode
  >({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20UpgradeableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'transfer', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20UpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20UpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'transferFrom', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function usePrepareErc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20UpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20UpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20UpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20UpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__.
 */
export function useErc20VotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useErc20VotesClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20VotesDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20VotesAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20VotesBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useErc20VotesCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"clock"`.
 */
export function useErc20VotesClock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20VotesDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useErc20VotesDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20VotesEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useErc20VotesGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useErc20VotesGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useErc20VotesGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"name"`.
 */
export function useErc20VotesName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20VotesNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useErc20VotesNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20VotesSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20VotesTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__.
 */
export function useErc20VotesWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20VotesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, TFunctionName, TMode>({
    abi: erc20VotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20VotesApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20VotesABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'approve', TMode>({
    abi: erc20VotesABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20VotesDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20VotesABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'decreaseAllowance', TMode>({
    abi: erc20VotesABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc20VotesDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof erc20VotesABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'delegate', TMode>({
    abi: erc20VotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useErc20VotesDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof erc20VotesABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'delegateBySig', TMode>({
    abi: erc20VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20VotesIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20VotesABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'increaseAllowance', TMode>({
    abi: erc20VotesABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20VotesPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof erc20VotesABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'permit', TMode>({
    abi: erc20VotesABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20VotesTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20VotesABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'transfer', TMode>({
    abi: erc20VotesABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20VotesTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20VotesABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesABI, 'transferFrom', TMode>({
    abi: erc20VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__.
 */
export function usePrepareErc20VotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20VotesApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20VotesDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc20VotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareErc20VotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20VotesIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20VotesPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20VotesTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20VotesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesABI}__.
 */
export function useErc20VotesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesABI,
    ...config,
  } as UseContractEventConfig<typeof erc20VotesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20VotesApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useErc20VotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useErc20VotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20VotesEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20VotesTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function useErc20VotesUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useErc20VotesUpgradeableClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20VotesUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20VotesUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20VotesUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useErc20VotesUpgradeableCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"clock"`.
 */
export function useErc20VotesUpgradeableClock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20VotesUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegates"`.
 */
export function useErc20VotesUpgradeableDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20VotesUpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useErc20VotesUpgradeableGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useErc20VotesUpgradeableGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"getVotes"`.
 */
export function useErc20VotesUpgradeableGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20VotesUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20VotesUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useErc20VotesUpgradeableNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20VotesUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20VotesUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function useErc20VotesUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: erc20VotesUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20VotesUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesUpgradeableABI, 'approve', TMode>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20VotesUpgradeableDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20VotesUpgradeableABI,
    'decreaseAllowance',
    TMode
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc20VotesUpgradeableDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'delegate',
        TMode
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesUpgradeableABI, 'delegate', TMode>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useErc20VotesUpgradeableDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20VotesUpgradeableABI,
    'delegateBySig',
    TMode
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20VotesUpgradeableIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20VotesUpgradeableABI,
    'increaseAllowance',
    TMode
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20VotesUpgradeablePermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'permit',
        TMode
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesUpgradeableABI, 'permit', TMode>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20VotesUpgradeableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20VotesUpgradeableABI, 'transfer', TMode>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20VotesUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20VotesUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20VotesUpgradeableABI,
    'transferFrom',
    TMode
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function usePrepareErc20VotesUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20VotesUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20VotesUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc20VotesUpgradeableDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareErc20VotesUpgradeableDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'delegateBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20VotesUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20VotesUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20VotesUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20VotesUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function useErc20VotesUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20VotesUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useErc20VotesUpgradeableDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc20VotesUpgradeableABI,
    'DelegateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useErc20VotesUpgradeableDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20VotesUpgradeableABI,
      'DelegateVotesChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc20VotesUpgradeableABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20VotesUpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20VotesUpgradeableABI,
      'EIP712DomainChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc20VotesUpgradeableABI,
    'EIP712DomainChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20VotesUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20VotesUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventsABI}__.
 */
export function useEventsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof eventsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventsABI,
    ...config,
  } as UseContractEventConfig<typeof eventsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventsABI}__ and `eventName` set to `"ContinuousBurn"`.
 */
export function useEventsContinuousBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof eventsABI, 'ContinuousBurn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventsABI,
    eventName: 'ContinuousBurn',
    ...config,
  } as UseContractEventConfig<typeof eventsABI, 'ContinuousBurn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventsABI}__ and `eventName` set to `"ContinuousMint"`.
 */
export function useEventsContinuousMintEvent(
  config: Omit<
    UseContractEventConfig<typeof eventsABI, 'ContinuousMint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventsABI,
    eventName: 'ContinuousMint',
    ...config,
  } as UseContractEventConfig<typeof eventsABI, 'ContinuousMint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventsABI}__ and `eventName` set to `"Hatch"`.
 */
export function useEventsHatchEvent(
  config: Omit<
    UseContractEventConfig<typeof eventsABI, 'Hatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventsABI,
    eventName: 'Hatch',
    ...config,
  } as UseContractEventConfig<typeof eventsABI, 'Hatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventsABI}__ and `eventName` set to `"SponsoredBurn"`.
 */
export function useEventsSponsoredBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof eventsABI, 'SponsoredBurn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventsABI,
    eventName: 'SponsoredBurn',
    ...config,
  } as UseContractEventConfig<typeof eventsABI, 'SponsoredBurn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventsABI}__ and `eventName` set to `"SponsoredMint"`.
 */
export function useEventsSponsoredMintEvent(
  config: Omit<
    UseContractEventConfig<typeof eventsABI, 'SponsoredMint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventsABI,
    eventName: 'SponsoredMint',
    ...config,
  } as UseContractEventConfig<typeof eventsABI, 'SponsoredMint'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__.
 */
export function useFooRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof fooABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof fooABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: fooABI, ...config } as UseContractReadConfig<
    typeof fooABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"id"`.
 */
export function useFooId<
  TFunctionName extends 'id',
  TSelectData = ReadContractResult<typeof fooABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof fooABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: fooABI,
    functionName: 'id',
    ...config,
  } as UseContractReadConfig<typeof fooABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__.
 */
export function useGovernanceBurnableErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useGovernanceBurnableErc20ClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useGovernanceBurnableErc20DomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"MINTER_ROLE_ID"`.
 */
export function useGovernanceBurnableErc20MinterRoleId<
  TFunctionName extends 'MINTER_ROLE_ID',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'MINTER_ROLE_ID',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"UPGRADER_ROLE_ID"`.
 */
export function useGovernanceBurnableErc20UpgraderRoleId<
  TFunctionName extends 'UPGRADER_ROLE_ID',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'UPGRADER_ROLE_ID',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useGovernanceBurnableErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useGovernanceBurnableErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useGovernanceBurnableErc20Checkpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"clock"`.
 */
export function useGovernanceBurnableErc20Clock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"dao"`.
 */
export function useGovernanceBurnableErc20Dao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useGovernanceBurnableErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"delegates"`.
 */
export function useGovernanceBurnableErc20Delegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useGovernanceBurnableErc20Eip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useGovernanceBurnableErc20GetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useGovernanceBurnableErc20GetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernanceBurnableErc20GetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useGovernanceBurnableErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useGovernanceBurnableErc20Nonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useGovernanceBurnableErc20NumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useGovernanceBurnableErc20ProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernanceBurnableErc20SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useGovernanceBurnableErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useGovernanceBurnableErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceBurnableErc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__.
 */
export function useGovernanceBurnableErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    TFunctionName,
    TMode
  >({ abi: governanceBurnableErc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useGovernanceBurnableErc20Approve<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof governanceBurnableErc20ABI, 'approve', TMode>({
    abi: governanceBurnableErc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"burn"`.
 */
export function useGovernanceBurnableErc20Burn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof governanceBurnableErc20ABI, 'burn', TMode>({
    abi: governanceBurnableErc20ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useGovernanceBurnableErc20BurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'burnFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<typeof governanceBurnableErc20ABI, 'burnFrom', TMode>(
    {
      abi: governanceBurnableErc20ABI,
      functionName: 'burnFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useGovernanceBurnableErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    'decreaseAllowance',
    TMode
  >({
    abi: governanceBurnableErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"delegate"`.
 */
export function useGovernanceBurnableErc20Delegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'delegate',
        TMode
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof governanceBurnableErc20ABI, 'delegate', TMode>(
    {
      abi: governanceBurnableErc20ABI,
      functionName: 'delegate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useGovernanceBurnableErc20DelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    'delegateBySig',
    TMode
  >({
    abi: governanceBurnableErc20ABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useGovernanceBurnableErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    'increaseAllowance',
    TMode
  >({
    abi: governanceBurnableErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"initialize"`.
 */
export function useGovernanceBurnableErc20Initialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'initialize',
        TMode
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    'initialize',
    TMode
  >({
    abi: governanceBurnableErc20ABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function useGovernanceBurnableErc20Mint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'mint',
        TMode
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof governanceBurnableErc20ABI, 'mint', TMode>({
    abi: governanceBurnableErc20ABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useGovernanceBurnableErc20Permit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'permit',
        TMode
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof governanceBurnableErc20ABI, 'permit', TMode>({
    abi: governanceBurnableErc20ABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useGovernanceBurnableErc20Transfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof governanceBurnableErc20ABI, 'transfer', TMode>(
    {
      abi: governanceBurnableErc20ABI,
      functionName: 'transfer',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useGovernanceBurnableErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    'transferFrom',
    TMode
  >({
    abi: governanceBurnableErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useGovernanceBurnableErc20UpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    'upgradeTo',
    TMode
  >({
    abi: governanceBurnableErc20ABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useGovernanceBurnableErc20UpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceBurnableErc20ABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof governanceBurnableErc20ABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof governanceBurnableErc20ABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: governanceBurnableErc20ABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__.
 */
export function usePrepareGovernanceBurnableErc20Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareGovernanceBurnableErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceBurnableErc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareGovernanceBurnableErc20Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceBurnableErc20ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceBurnableErc20ABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareGovernanceBurnableErc20BurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'burnFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'burnFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareGovernanceBurnableErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareGovernanceBurnableErc20Delegate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'delegate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareGovernanceBurnableErc20DelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'delegateBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareGovernanceBurnableErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGovernanceBurnableErc20Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'initialize'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareGovernanceBurnableErc20Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceBurnableErc20ABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceBurnableErc20ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareGovernanceBurnableErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceBurnableErc20ABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareGovernanceBurnableErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'transfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareGovernanceBurnableErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareGovernanceBurnableErc20UpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'upgradeTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareGovernanceBurnableErc20UpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceBurnableErc20ABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceBurnableErc20ABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceBurnableErc20ABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__.
 */
export function useGovernanceBurnableErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governanceBurnableErc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    ...config,
  } as UseContractEventConfig<typeof governanceBurnableErc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useGovernanceBurnableErc20AdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceBurnableErc20ABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof governanceBurnableErc20ABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useGovernanceBurnableErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useGovernanceBurnableErc20BeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceBurnableErc20ABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof governanceBurnableErc20ABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useGovernanceBurnableErc20DelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governanceBurnableErc20ABI,
      'DelegateChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof governanceBurnableErc20ABI,
    'DelegateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useGovernanceBurnableErc20DelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governanceBurnableErc20ABI,
      'DelegateVotesChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof governanceBurnableErc20ABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useGovernanceBurnableErc20Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governanceBurnableErc20ABI,
      'EIP712DomainChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<
    typeof governanceBurnableErc20ABI,
    'EIP712DomainChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useGovernanceBurnableErc20InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useGovernanceBurnableErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceBurnableErc20ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useGovernanceBurnableErc20UpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceBurnableErc20ABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof governanceBurnableErc20ABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__.
 */
export function useHelpersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useHelpersIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useHelpersExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useHelpersExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useHelpersExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useHelpersTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useHelpersTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useHelpersTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useHelpersTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useHelpersTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof helpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: helpersABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<typeof helpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link helpersABI}__.
 */
export function useHelpersWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof helpersABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof helpersABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof helpersABI, TFunctionName, TMode>({
    abi: helpersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"createNamedUser"`.
 */
export function useHelpersCreateNamedUser<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof helpersABI,
          'createNamedUser'
        >['request']['abi'],
        'createNamedUser',
        TMode
      > & { functionName?: 'createNamedUser' }
    : UseContractWriteConfig<typeof helpersABI, 'createNamedUser', TMode> & {
        abi?: never
        functionName?: 'createNamedUser'
      } = {} as any,
) {
  return useContractWrite<typeof helpersABI, 'createNamedUser', TMode>({
    abi: helpersABI,
    functionName: 'createNamedUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"createUsers"`.
 */
export function useHelpersCreateUsers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof helpersABI,
          'createUsers'
        >['request']['abi'],
        'createUsers',
        TMode
      > & { functionName?: 'createUsers' }
    : UseContractWriteConfig<typeof helpersABI, 'createUsers', TMode> & {
        abi?: never
        functionName?: 'createUsers'
      } = {} as any,
) {
  return useContractWrite<typeof helpersABI, 'createUsers', TMode>({
    abi: helpersABI,
    functionName: 'createUsers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"failed"`.
 */
export function useHelpersFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof helpersABI,
          'failed'
        >['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof helpersABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof helpersABI, 'failed', TMode>({
    abi: helpersABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function useHelpersGetNextUserAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof helpersABI,
          'getNextUserAddress'
        >['request']['abi'],
        'getNextUserAddress',
        TMode
      > & { functionName?: 'getNextUserAddress' }
    : UseContractWriteConfig<typeof helpersABI, 'getNextUserAddress', TMode> & {
        abi?: never
        functionName?: 'getNextUserAddress'
      } = {} as any,
) {
  return useContractWrite<typeof helpersABI, 'getNextUserAddress', TMode>({
    abi: helpersABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link helpersABI}__.
 */
export function usePrepareHelpersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof helpersABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: helpersABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof helpersABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"createNamedUser"`.
 */
export function usePrepareHelpersCreateNamedUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof helpersABI, 'createNamedUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: helpersABI,
    functionName: 'createNamedUser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof helpersABI, 'createNamedUser'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"createUsers"`.
 */
export function usePrepareHelpersCreateUsers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof helpersABI, 'createUsers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: helpersABI,
    functionName: 'createUsers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof helpersABI, 'createUsers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareHelpersFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof helpersABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: helpersABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof helpersABI, 'failed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link helpersABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function usePrepareHelpersGetNextUserAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof helpersABI, 'getNextUserAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: helpersABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof helpersABI, 'getNextUserAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__.
 */
export function useHelpersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    ...config,
  } as UseContractEventConfig<typeof helpersABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log"`.
 */
export function useHelpersLogEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_address"`.
 */
export function useHelpersLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_array"`.
 */
export function useHelpersLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useHelpersLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useHelpersLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_int"`.
 */
export function useHelpersLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useHelpersLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useHelpersLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useHelpersLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useHelpersLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useHelpersLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useHelpersLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useHelpersLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useHelpersLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useHelpersLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_string"`.
 */
export function useHelpersLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"log_uint"`.
 */
export function useHelpersLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link helpersABI}__ and `eventName` set to `"logs"`.
 */
export function useHelpersLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof helpersABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: helpersABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof helpersABI, 'logs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iabiResolverABI}__.
 */
export function useIabiResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iabiResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iabiResolverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iabiResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iabiResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iabiResolverABI}__ and `functionName` set to `"ABI"`.
 */
export function useIabiResolverAbi<
  TFunctionName extends 'ABI',
  TSelectData = ReadContractResult<typeof iabiResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iabiResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iabiResolverABI,
    functionName: 'ABI',
    ...config,
  } as UseContractReadConfig<
    typeof iabiResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iabiResolverABI}__.
 */
export function useIabiResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iabiResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iabiResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iabiResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iabiResolverABI}__ and `eventName` set to `"ABIChanged"`.
 */
export function useIabiResolverAbiChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iabiResolverABI, 'ABIChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iabiResolverABI,
    eventName: 'ABIChanged',
    ...config,
  } as UseContractEventConfig<typeof iabiResolverABI, 'ABIChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iAccessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlUpgradeableGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<
    typeof iAccessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlUpgradeableHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<
    typeof iAccessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iAccessControlUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: iAccessControlUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlUpgradeableGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        typeof iAccessControlUpgradeableABI,
        'grantRole',
        TMode
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlUpgradeableABI,
    'grantRole',
    TMode
  >({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlUpgradeableRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        typeof iAccessControlUpgradeableABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlUpgradeableABI,
    'renounceRole',
    TMode
  >({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlUpgradeableRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        typeof iAccessControlUpgradeableABI,
        'revokeRole',
        TMode
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlUpgradeableABI,
    'revokeRole',
    TMode
  >({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function usePrepareIAccessControlUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAccessControlUpgradeableABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddrResolverABI}__.
 */
export function useIAddrResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAddrResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAddrResolverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAddrResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAddrResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddrResolverABI}__ and `functionName` set to `"addr"`.
 */
export function useIAddrResolverAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof iAddrResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAddrResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAddrResolverABI,
    functionName: 'addr',
    ...config,
  } as UseContractReadConfig<
    typeof iAddrResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddrResolverABI}__.
 */
export function useIAddrResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAddrResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAddrResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iAddrResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddrResolverABI}__ and `eventName` set to `"AddrChanged"`.
 */
export function useIAddrResolverAddrChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAddrResolverABI, 'AddrChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAddrResolverABI,
    eventName: 'AddrChanged',
    ...config,
  } as UseContractEventConfig<typeof iAddrResolverABI, 'AddrChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddressResolverABI}__.
 */
export function useIAddressResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAddressResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAddressResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAddressResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAddressResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddressResolverABI}__ and `functionName` set to `"addr"`.
 */
export function useIAddressResolverAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof iAddressResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAddressResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAddressResolverABI,
    functionName: 'addr',
    ...config,
  } as UseContractReadConfig<
    typeof iAddressResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddressResolverABI}__.
 */
export function useIAddressResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAddressResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAddressResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iAddressResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddressResolverABI}__ and `eventName` set to `"AddressChanged"`.
 */
export function useIAddressResolverAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAddressResolverABI, 'AddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAddressResolverABI,
    eventName: 'AddressChanged',
    ...config,
  } as UseContractEventConfig<typeof iAddressResolverABI, 'AddressChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeaconRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBondedTokenABI}__.
 */
export function useIBondedTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBondedTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBondedTokenABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBondedTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIBondedTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof iBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBondedTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBondedTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof iBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBondedTokenABI}__.
 */
export function useIBondedTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBondedTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iBondedTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iBondedTokenABI, TFunctionName, TMode>({
    abi: iBondedTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBondedTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useIBondedTokenBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBondedTokenABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof iBondedTokenABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof iBondedTokenABI, 'burn', TMode>({
    abi: iBondedTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBondedTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useIBondedTokenMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBondedTokenABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof iBondedTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof iBondedTokenABI, 'mint', TMode>({
    abi: iBondedTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBondedTokenABI}__.
 */
export function usePrepareIBondedTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBondedTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBondedTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBondedTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBondedTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareIBondedTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBondedTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBondedTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBondedTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBondedTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIBondedTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBondedTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBondedTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBondedTokenABI, 'mint'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBondingCurveABI}__.
 */
export function useIBondingCurveRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBondingCurveABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBondingCurveABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBondingCurveABI}__ and `functionName` set to `"getContinuousBurnRefund"`.
 */
export function useIBondingCurveGetContinuousBurnRefund<
  TFunctionName extends 'getContinuousBurnRefund',
  TSelectData = ReadContractResult<typeof iBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBondingCurveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBondingCurveABI,
    functionName: 'getContinuousBurnRefund',
    ...config,
  } as UseContractReadConfig<
    typeof iBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBondingCurveABI}__ and `functionName` set to `"getContinuousMintReward"`.
 */
export function useIBondingCurveGetContinuousMintReward<
  TFunctionName extends 'getContinuousMintReward',
  TSelectData = ReadContractResult<typeof iBondingCurveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBondingCurveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBondingCurveABI,
    functionName: 'getContinuousMintReward',
    ...config,
  } as UseContractReadConfig<
    typeof iBondingCurveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iContentHashResolverABI}__.
 */
export function useIContentHashResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iContentHashResolverABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iContentHashResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iContentHashResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iContentHashResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iContentHashResolverABI}__ and `functionName` set to `"contenthash"`.
 */
export function useIContentHashResolverContenthash<
  TFunctionName extends 'contenthash',
  TSelectData = ReadContractResult<
    typeof iContentHashResolverABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iContentHashResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iContentHashResolverABI,
    functionName: 'contenthash',
    ...config,
  } as UseContractReadConfig<
    typeof iContentHashResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iContentHashResolverABI}__.
 */
export function useIContentHashResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iContentHashResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iContentHashResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iContentHashResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iContentHashResolverABI}__ and `eventName` set to `"ContenthashChanged"`.
 */
export function useIContentHashResolverContenthashChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iContentHashResolverABI,
      'ContenthashChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iContentHashResolverABI,
    eventName: 'ContenthashChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iContentHashResolverABI,
    'ContenthashChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof idaoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: idaoABI, ...config } as UseContractReadConfig<
    typeof idaoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useIdaoGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof idaoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: idaoABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"hasPermission"`.
 */
export function useIdaoHasPermission<
  TFunctionName extends 'hasPermission',
  TSelectData = ReadContractResult<typeof idaoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: idaoABI,
    functionName: 'hasPermission',
    ...config,
  } as UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof idaoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, TFunctionName, TMode>({
    abi: idaoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"deposit"`.
 */
export function useIdaoDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof idaoABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'deposit', TMode>({
    abi: idaoABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"execute"`.
 */
export function useIdaoExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof idaoABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'execute', TMode>({
    abi: idaoABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useIdaoIsValidSignature<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaoABI,
          'isValidSignature'
        >['request']['abi'],
        'isValidSignature',
        TMode
      > & { functionName?: 'isValidSignature' }
    : UseContractWriteConfig<typeof idaoABI, 'isValidSignature', TMode> & {
        abi?: never
        functionName?: 'isValidSignature'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'isValidSignature', TMode>({
    abi: idaoABI,
    functionName: 'isValidSignature',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function useIdaoRegisterStandardCallback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaoABI,
          'registerStandardCallback'
        >['request']['abi'],
        'registerStandardCallback',
        TMode
      > & { functionName?: 'registerStandardCallback' }
    : UseContractWriteConfig<
        typeof idaoABI,
        'registerStandardCallback',
        TMode
      > & {
        abi?: never
        functionName?: 'registerStandardCallback'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'registerStandardCallback', TMode>({
    abi: idaoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function useIdaoSetMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaoABI,
          'setMetadata'
        >['request']['abi'],
        'setMetadata',
        TMode
      > & { functionName?: 'setMetadata' }
    : UseContractWriteConfig<typeof idaoABI, 'setMetadata', TMode> & {
        abi?: never
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'setMetadata', TMode>({
    abi: idaoABI,
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function useIdaoSetSignatureValidator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaoABI,
          'setSignatureValidator'
        >['request']['abi'],
        'setSignatureValidator',
        TMode
      > & { functionName?: 'setSignatureValidator' }
    : UseContractWriteConfig<typeof idaoABI, 'setSignatureValidator', TMode> & {
        abi?: never
        functionName?: 'setSignatureValidator'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'setSignatureValidator', TMode>({
    abi: idaoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useIdaoSetTrustedForwarder<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaoABI,
          'setTrustedForwarder'
        >['request']['abi'],
        'setTrustedForwarder',
        TMode
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<typeof idaoABI, 'setTrustedForwarder', TMode> & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'setTrustedForwarder', TMode>({
    abi: idaoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__.
 */
export function usePrepareIdaoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIdaoDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIdaoExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function usePrepareIdaoIsValidSignature(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'isValidSignature'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'isValidSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'isValidSignature'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function usePrepareIdaoRegisterStandardCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'registerStandardCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof idaoABI,
    'registerStandardCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function usePrepareIdaoSetMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function usePrepareIdaoSetSignatureValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setSignatureValidator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setSignatureValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareIdaoSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setTrustedForwarder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setTrustedForwarder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: idaoABI, ...config } as UseContractEventConfig<
    typeof idaoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIdaoDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"Executed"`.
 */
export function useIdaoExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'Executed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'Executed',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'Executed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"MetadataSet"`.
 */
export function useIdaoMetadataSetEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'MetadataSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'MetadataSet',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'MetadataSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"NativeTokenDeposited"`.
 */
export function useIdaoNativeTokenDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'NativeTokenDeposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'NativeTokenDeposited',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'NativeTokenDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"SignatureValidatorSet"`.
 */
export function useIdaoSignatureValidatorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'SignatureValidatorSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'SignatureValidatorSet',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'SignatureValidatorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"StandardCallbackRegistered"`.
 */
export function useIdaoStandardCallbackRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'StandardCallbackRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'StandardCallbackRegistered',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'StandardCallbackRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"TrustedForwarderSet"`.
 */
export function useIdaoTrustedForwarderSetEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'TrustedForwarderSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'TrustedForwarderSet',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'TrustedForwarderSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsRecordResolverABI}__.
 */
export function useIdnsRecordResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof idnsRecordResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof idnsRecordResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: idnsRecordResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof idnsRecordResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsRecordResolverABI}__ and `functionName` set to `"dnsRecord"`.
 */
export function useIdnsRecordResolverDnsRecord<
  TFunctionName extends 'dnsRecord',
  TSelectData = ReadContractResult<typeof idnsRecordResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof idnsRecordResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: idnsRecordResolverABI,
    functionName: 'dnsRecord',
    ...config,
  } as UseContractReadConfig<
    typeof idnsRecordResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsRecordResolverABI}__.
 */
export function useIdnsRecordResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof idnsRecordResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsRecordResolverABI,
    ...config,
  } as UseContractEventConfig<typeof idnsRecordResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsRecordResolverABI}__ and `eventName` set to `"DNSRecordChanged"`.
 */
export function useIdnsRecordResolverDnsRecordChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsRecordResolverABI,
    eventName: 'DNSRecordChanged',
    ...config,
  } as UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsRecordResolverABI}__ and `eventName` set to `"DNSRecordDeleted"`.
 */
export function useIdnsRecordResolverDnsRecordDeletedEvent(
  config: Omit<
    UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordDeleted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsRecordResolverABI,
    eventName: 'DNSRecordDeleted',
    ...config,
  } as UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordDeleted'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsZoneResolverABI}__.
 */
export function useIdnsZoneResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof idnsZoneResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof idnsZoneResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: idnsZoneResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof idnsZoneResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsZoneResolverABI}__ and `functionName` set to `"zonehash"`.
 */
export function useIdnsZoneResolverZonehash<
  TFunctionName extends 'zonehash',
  TSelectData = ReadContractResult<typeof idnsZoneResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof idnsZoneResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: idnsZoneResolverABI,
    functionName: 'zonehash',
    ...config,
  } as UseContractReadConfig<
    typeof idnsZoneResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsZoneResolverABI}__.
 */
export function useIdnsZoneResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof idnsZoneResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsZoneResolverABI,
    ...config,
  } as UseContractEventConfig<typeof idnsZoneResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsZoneResolverABI}__ and `eventName` set to `"DNSZonehashChanged"`.
 */
export function useIdnsZoneResolverDnsZonehashChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof idnsZoneResolverABI, 'DNSZonehashChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsZoneResolverABI,
    eventName: 'DNSZonehashChanged',
    ...config,
  } as UseContractEventConfig<typeof idnsZoneResolverABI, 'DNSZonehashChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieip4824ABI}__.
 */
export function useIeip4824Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ieip4824ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ieip4824ABI,
    ...config,
  } as UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieip4824ABI}__ and `functionName` set to `"daoURI"`.
 */
export function useIeip4824DaoUri<
  TFunctionName extends 'daoURI',
  TSelectData = ReadContractResult<typeof ieip4824ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ieip4824ABI,
    functionName: 'daoURI',
    ...config,
  } as UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc1155ReceiverUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: ierc1155ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155BatchReceived<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        typeof ierc1155ReceiverUpgradeableABI,
        'onERC1155BatchReceived',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155BatchReceived',
    TMode
  >({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          'onERC1155Received'
        >['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        typeof ierc1155ReceiverUpgradeableABI,
        'onERC1155Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155Received',
    TMode
  >({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc1155ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155UpgradeableBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155UpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc1155UpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, TFunctionName, TMode>({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeBatchTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'safeBatchTransferFrom'
        >['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc1155UpgradeableABI,
        'safeBatchTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155UpgradeableABI,
    'safeBatchTransferFrom',
    TMode
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc1155UpgradeableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155UpgradeableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc1155UpgradeableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155UpgradeableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function usePrepareIerc1155UpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155UpgradeableTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155UpgradeableTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UpgradeableUriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__.
 */
export function useIerc1271Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1271ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1271ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useIerc1271IsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof ierc1271ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1271ABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function useIerc1967Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967AdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967BeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__.
 */
export function useIerc1967UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967UpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967UpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'approve', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transfer', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transferFrom', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc20MetadataUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: ierc20MetadataUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof ierc20MetadataUpgradeableABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc20MetadataUpgradeableABI,
    'approve',
    TMode
  >({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataUpgradeableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof ierc20MetadataUpgradeableABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc20MetadataUpgradeableABI,
    'transfer',
    TMode
  >({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc20MetadataUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc20MetadataUpgradeableABI,
    'transferFrom',
    TMode
  >({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function usePrepareIerc20MetadataUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      'transfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc20PermitUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: ierc20PermitUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitUpgradeablePermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitUpgradeableABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        typeof ierc20PermitUpgradeableABI,
        'permit',
        TMode
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, 'permit', TMode>({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function usePrepareIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20PermitUpgradeableABI,
    'permit'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, TFunctionName, TMode>({
    abi: ierc20PermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, 'permit', TMode>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20UpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20UpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc20UpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, TFunctionName, TMode>({
    abi: ierc20UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20UpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'approve', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20UpgradeableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transfer', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20UpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc20UpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transferFrom', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function usePrepareIerc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc5267ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5267ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useIerc5267Eip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof ierc5267ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5267ABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc5267ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5267ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc5267ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useIerc5267Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5267ABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267UpgradeableABI}__.
 */
export function useIerc5267UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc5267UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5267UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5267UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc5267UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267UpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useIerc5267UpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<
    typeof ierc5267UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5267UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5267UpgradeableABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<
    typeof ierc5267UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267UpgradeableABI}__.
 */
export function useIerc5267UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc5267UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5267UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc5267UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267UpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useIerc5267UpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc5267UpgradeableABI,
      'EIP712DomainChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5267UpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<
    typeof ierc5267UpgradeableABI,
    'EIP712DomainChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805ABI}__.
 */
export function useIerc5805Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc5805ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useIerc5805ClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<typeof ierc5805ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805ABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"clock"`.
 */
export function useIerc5805Clock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<typeof ierc5805ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805ABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"delegates"`.
 */
export function useIerc5805Delegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof ierc5805ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805ABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIerc5805GetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof ierc5805ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805ABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIerc5805GetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof ierc5805ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805ABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIerc5805GetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof ierc5805ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805ABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof ierc5805ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc5805ABI}__.
 */
export function useIerc5805Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc5805ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc5805ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc5805ABI, TFunctionName, TMode>({
    abi: ierc5805ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"delegate"`.
 */
export function useIerc5805Delegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc5805ABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof ierc5805ABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof ierc5805ABI, 'delegate', TMode>({
    abi: ierc5805ABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIerc5805DelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc5805ABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof ierc5805ABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof ierc5805ABI, 'delegateBySig', TMode>({
    abi: ierc5805ABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc5805ABI}__.
 */
export function usePrepareIerc5805Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc5805ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc5805ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc5805ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIerc5805Delegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc5805ABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc5805ABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc5805ABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc5805ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIerc5805DelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc5805ABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc5805ABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc5805ABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5805ABI}__.
 */
export function useIerc5805Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc5805ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5805ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc5805ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5805ABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIerc5805DelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5805ABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5805ABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc5805ABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5805ABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIerc5805DelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5805ABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5805ABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc5805ABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805UpgradeableABI}__.
 */
export function useIerc5805UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5805UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useIerc5805UpgradeableClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5805UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805UpgradeableABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"clock"`.
 */
export function useIerc5805UpgradeableClock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5805UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805UpgradeableABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"delegates"`.
 */
export function useIerc5805UpgradeableDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5805UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805UpgradeableABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIerc5805UpgradeableGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5805UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805UpgradeableABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIerc5805UpgradeableGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5805UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805UpgradeableABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIerc5805UpgradeableGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc5805UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc5805UpgradeableABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc5805UpgradeableABI}__.
 */
export function useIerc5805UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc5805UpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc5805UpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc5805UpgradeableABI, TFunctionName, TMode>({
    abi: ierc5805UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function useIerc5805UpgradeableDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc5805UpgradeableABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        typeof ierc5805UpgradeableABI,
        'delegate',
        TMode
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof ierc5805UpgradeableABI, 'delegate', TMode>({
    abi: ierc5805UpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIerc5805UpgradeableDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc5805UpgradeableABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof ierc5805UpgradeableABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc5805UpgradeableABI,
    'delegateBySig',
    TMode
  >({
    abi: ierc5805UpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc5805UpgradeableABI}__.
 */
export function usePrepareIerc5805UpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc5805UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc5805UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc5805UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIerc5805UpgradeableDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc5805UpgradeableABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc5805UpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc5805UpgradeableABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIerc5805UpgradeableDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc5805UpgradeableABI,
      'delegateBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc5805UpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc5805UpgradeableABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5805UpgradeableABI}__.
 */
export function useIerc5805UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc5805UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5805UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc5805UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIerc5805UpgradeableDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5805UpgradeableABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5805UpgradeableABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc5805UpgradeableABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5805UpgradeableABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIerc5805UpgradeableDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc5805UpgradeableABI,
      'DelegateVotesChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc5805UpgradeableABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof ierc5805UpgradeableABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6372ABI}__.
 */
export function useIerc6372Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc6372ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc6372ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6372ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc6372ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6372ABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useIerc6372ClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<typeof ierc6372ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc6372ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6372ABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<typeof ierc6372ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6372ABI}__ and `functionName` set to `"clock"`.
 */
export function useIerc6372Clock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<typeof ierc6372ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc6372ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6372ABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<typeof ierc6372ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6372UpgradeableABI}__.
 */
export function useIerc6372UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc6372UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6372UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6372UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc6372UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6372UpgradeableABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useIerc6372UpgradeableClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<
    typeof ierc6372UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6372UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6372UpgradeableABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof ierc6372UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6372UpgradeableABI}__ and `functionName` set to `"clock"`.
 */
export function useIerc6372UpgradeableClock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<
    typeof ierc6372UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6372UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6372UpgradeableABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<
    typeof ierc6372UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721ReceiverUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: ierc721ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverUpgradeableOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        typeof ierc721ReceiverUpgradeableABI,
        'onERC721Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received',
    TMode
  >({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iExtendedResolverABI}__.
 */
export function useIExtendedResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iExtendedResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iExtendedResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iExtendedResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iExtendedResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iExtendedResolverABI}__ and `functionName` set to `"resolve"`.
 */
export function useIExtendedResolverResolve<
  TFunctionName extends 'resolve',
  TSelectData = ReadContractResult<typeof iExtendedResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iExtendedResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iExtendedResolverABI,
    functionName: 'resolve',
    ...config,
  } as UseContractReadConfig<
    typeof iExtendedResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHatchABI}__.
 */
export function useIHatchWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iHatchABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iHatchABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iHatchABI, TFunctionName, TMode>({
    abi: iHatchABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"cancel"`.
 */
export function useIHatchCancel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iHatchABI,
          'cancel'
        >['request']['abi'],
        'cancel',
        TMode
      > & { functionName?: 'cancel' }
    : UseContractWriteConfig<typeof iHatchABI, 'cancel', TMode> & {
        abi?: never
        functionName?: 'cancel'
      } = {} as any,
) {
  return useContractWrite<typeof iHatchABI, 'cancel', TMode>({
    abi: iHatchABI,
    functionName: 'cancel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"claimVesting"`.
 */
export function useIHatchClaimVesting<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iHatchABI,
          'claimVesting'
        >['request']['abi'],
        'claimVesting',
        TMode
      > & { functionName?: 'claimVesting' }
    : UseContractWriteConfig<typeof iHatchABI, 'claimVesting', TMode> & {
        abi?: never
        functionName?: 'claimVesting'
      } = {} as any,
) {
  return useContractWrite<typeof iHatchABI, 'claimVesting', TMode>({
    abi: iHatchABI,
    functionName: 'claimVesting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"contribute"`.
 */
export function useIHatchContribute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iHatchABI,
          'contribute'
        >['request']['abi'],
        'contribute',
        TMode
      > & { functionName?: 'contribute' }
    : UseContractWriteConfig<typeof iHatchABI, 'contribute', TMode> & {
        abi?: never
        functionName?: 'contribute'
      } = {} as any,
) {
  return useContractWrite<typeof iHatchABI, 'contribute', TMode>({
    abi: iHatchABI,
    functionName: 'contribute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"hatch"`.
 */
export function useIHatchHatch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iHatchABI, 'hatch'>['request']['abi'],
        'hatch',
        TMode
      > & { functionName?: 'hatch' }
    : UseContractWriteConfig<typeof iHatchABI, 'hatch', TMode> & {
        abi?: never
        functionName?: 'hatch'
      } = {} as any,
) {
  return useContractWrite<typeof iHatchABI, 'hatch', TMode>({
    abi: iHatchABI,
    functionName: 'hatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"refund"`.
 */
export function useIHatchRefund<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iHatchABI,
          'refund'
        >['request']['abi'],
        'refund',
        TMode
      > & { functionName?: 'refund' }
    : UseContractWriteConfig<typeof iHatchABI, 'refund', TMode> & {
        abi?: never
        functionName?: 'refund'
      } = {} as any,
) {
  return useContractWrite<typeof iHatchABI, 'refund', TMode>({
    abi: iHatchABI,
    functionName: 'refund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHatchABI}__.
 */
export function usePrepareIHatchWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHatchABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHatchABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHatchABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"cancel"`.
 */
export function usePrepareIHatchCancel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHatchABI, 'cancel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHatchABI,
    functionName: 'cancel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHatchABI, 'cancel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"claimVesting"`.
 */
export function usePrepareIHatchClaimVesting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHatchABI, 'claimVesting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHatchABI,
    functionName: 'claimVesting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHatchABI, 'claimVesting'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"contribute"`.
 */
export function usePrepareIHatchContribute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHatchABI, 'contribute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHatchABI,
    functionName: 'contribute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHatchABI, 'contribute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"hatch"`.
 */
export function usePrepareIHatchHatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHatchABI, 'hatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHatchABI,
    functionName: 'hatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHatchABI, 'hatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHatchABI}__ and `functionName` set to `"refund"`.
 */
export function usePrepareIHatchRefund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHatchABI, 'refund'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHatchABI,
    functionName: 'refund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHatchABI, 'refund'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInterfaceResolverABI}__.
 */
export function useIInterfaceResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iInterfaceResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInterfaceResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iInterfaceResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iInterfaceResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInterfaceResolverABI}__ and `functionName` set to `"interfaceImplementer"`.
 */
export function useIInterfaceResolverInterfaceImplementer<
  TFunctionName extends 'interfaceImplementer',
  TSelectData = ReadContractResult<typeof iInterfaceResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInterfaceResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInterfaceResolverABI,
    functionName: 'interfaceImplementer',
    ...config,
  } as UseContractReadConfig<
    typeof iInterfaceResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInterfaceResolverABI}__.
 */
export function useIInterfaceResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iInterfaceResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInterfaceResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iInterfaceResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInterfaceResolverABI}__ and `eventName` set to `"InterfaceChanged"`.
 */
export function useIInterfaceResolverInterfaceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iInterfaceResolverABI, 'InterfaceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInterfaceResolverABI,
    eventName: 'InterfaceChanged',
    ...config,
  } as UseContractEventConfig<typeof iInterfaceResolverABI, 'InterfaceChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"canExecute"`.
 */
export function useIMajorityVotingCanExecute<
  TFunctionName extends 'canExecute',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'canExecute',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"canVote"`.
 */
export function useIMajorityVotingCanVote<
  TFunctionName extends 'canVote',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"getVoteOption"`.
 */
export function useIMajorityVotingGetVoteOption<
  TFunctionName extends 'getVoteOption',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isMinParticipationReached"`.
 */
export function useIMajorityVotingIsMinParticipationReached<
  TFunctionName extends 'isMinParticipationReached',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 */
export function useIMajorityVotingIsSupportThresholdReached<
  TFunctionName extends 'isSupportThresholdReached',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 */
export function useIMajorityVotingIsSupportThresholdReachedEarly<
  TFunctionName extends 'isSupportThresholdReachedEarly',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"minParticipation"`.
 */
export function useIMajorityVotingMinParticipation<
  TFunctionName extends 'minParticipation',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"supportThreshold"`.
 */
export function useIMajorityVotingSupportThreshold<
  TFunctionName extends 'supportThreshold',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMajorityVotingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iMajorityVotingABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMajorityVotingABI, TFunctionName, TMode>({
    abi: iMajorityVotingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"execute"`.
 */
export function useIMajorityVotingExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMajorityVotingABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof iMajorityVotingABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof iMajorityVotingABI, 'execute', TMode>({
    abi: iMajorityVotingABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"vote"`.
 */
export function useIMajorityVotingVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMajorityVotingABI,
          'vote'
        >['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof iMajorityVotingABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof iMajorityVotingABI, 'vote', TMode>({
    abi: iMajorityVotingABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function usePrepareIMajorityVotingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMajorityVotingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIMajorityVotingExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareIMajorityVotingVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMajorityVotingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMajorityVotingABI,
    ...config,
  } as UseContractEventConfig<typeof iMajorityVotingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMajorityVotingABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useIMajorityVotingVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof iMajorityVotingABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMajorityVotingABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof iMajorityVotingABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMembershipABI}__.
 */
export function useIMembershipRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMembershipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMembershipABI,
    ...config,
  } as UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMembershipABI}__ and `functionName` set to `"isMember"`.
 */
export function useIMembershipIsMember<
  TFunctionName extends 'isMember',
  TSelectData = ReadContractResult<typeof iMembershipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMembershipABI,
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__.
 */
export function useIMembershipEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMembershipABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    ...config,
  } as UseContractEventConfig<typeof iMembershipABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembersAdded"`.
 */
export function useIMembershipMembersAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iMembershipABI, 'MembersAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    eventName: 'MembersAdded',
    ...config,
  } as UseContractEventConfig<typeof iMembershipABI, 'MembersAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembersRemoved"`.
 */
export function useIMembershipMembersRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof iMembershipABI, 'MembersRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    eventName: 'MembersRemoved',
    ...config,
  } as UseContractEventConfig<typeof iMembershipABI, 'MembersRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembershipContractAnnounced"`.
 */
export function useIMembershipMembershipContractAnnouncedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iMembershipABI,
      'MembershipContractAnnounced'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    eventName: 'MembershipContractAnnounced',
    ...config,
  } as UseContractEventConfig<
    typeof iMembershipABI,
    'MembershipContractAnnounced'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'aggregate3Value',
        TMode
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iNameResolverABI}__.
 */
export function useINameResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iNameResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iNameResolverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iNameResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iNameResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iNameResolverABI}__ and `functionName` set to `"name"`.
 */
export function useINameResolverName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof iNameResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iNameResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iNameResolverABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof iNameResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iNameResolverABI}__.
 */
export function useINameResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iNameResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iNameResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iNameResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iNameResolverABI}__ and `eventName` set to `"NameChanged"`.
 */
export function useINameResolverNameChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iNameResolverABI, 'NameChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iNameResolverABI,
    eventName: 'NameChanged',
    ...config,
  } as UseContractEventConfig<typeof iNameResolverABI, 'NameChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPermissionConditionABI}__.
 */
export function useIPermissionConditionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iPermissionConditionABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPermissionConditionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPermissionConditionABI,
    ...config,
  } as UseContractReadConfig<
    typeof iPermissionConditionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPermissionConditionABI}__ and `functionName` set to `"isGranted"`.
 */
export function useIPermissionConditionIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<
    typeof iPermissionConditionABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPermissionConditionABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPermissionConditionABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<
    typeof iPermissionConditionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginABI}__.
 */
export function useIPluginRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginABI,
    ...config,
  } as UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginABI}__ and `functionName` set to `"pluginType"`.
 */
export function useIPluginPluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof iPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__.
 */
export function useIPluginRepoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginRepoABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPluginRepoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPluginRepoABI, TFunctionName, TMode>({
    abi: iPluginRepoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"createVersion"`.
 */
export function useIPluginRepoCreateVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginRepoABI,
          'createVersion'
        >['request']['abi'],
        'createVersion',
        TMode
      > & { functionName?: 'createVersion' }
    : UseContractWriteConfig<typeof iPluginRepoABI, 'createVersion', TMode> & {
        abi?: never
        functionName?: 'createVersion'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginRepoABI, 'createVersion', TMode>({
    abi: iPluginRepoABI,
    functionName: 'createVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 */
export function useIPluginRepoUpdateReleaseMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginRepoABI,
          'updateReleaseMetadata'
        >['request']['abi'],
        'updateReleaseMetadata',
        TMode
      > & { functionName?: 'updateReleaseMetadata' }
    : UseContractWriteConfig<
        typeof iPluginRepoABI,
        'updateReleaseMetadata',
        TMode
      > & {
        abi?: never
        functionName?: 'updateReleaseMetadata'
      } = {} as any,
) {
  return useContractWrite<
    typeof iPluginRepoABI,
    'updateReleaseMetadata',
    TMode
  >({
    abi: iPluginRepoABI,
    functionName: 'updateReleaseMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__.
 */
export function usePrepareIPluginRepoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginRepoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginRepoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginRepoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"createVersion"`.
 */
export function usePrepareIPluginRepoCreateVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginRepoABI, 'createVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginRepoABI,
    functionName: 'createVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginRepoABI, 'createVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 */
export function usePrepareIPluginRepoUpdateReleaseMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPluginRepoABI,
      'updateReleaseMetadata'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginRepoABI,
    functionName: 'updateReleaseMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPluginRepoABI,
    'updateReleaseMetadata'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProposalABI}__.
 */
export function useIProposalRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProposalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iProposalABI,
    ...config,
  } as UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProposalABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useIProposalProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof iProposalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProposalABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__.
 */
export function useIProposalEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iProposalABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProposalABI,
    ...config,
  } as UseContractEventConfig<typeof iProposalABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useIProposalProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iProposalABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProposalABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof iProposalABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useIProposalProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof iProposalABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProposalABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof iProposalABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function useIPluginSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginSetupABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginSetupABI,
    ...config,
  } as UseContractReadConfig<
    typeof iPluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function useIPluginSetupImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iPluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginSetupABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof iPluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function useIPluginSetupWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginSetupABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPluginSetupABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPluginSetupABI, TFunctionName, TMode>({
    abi: iPluginSetupABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function useIPluginSetupPrepareInstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginSetupABI,
          'prepareInstallation'
        >['request']['abi'],
        'prepareInstallation',
        TMode
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<
        typeof iPluginSetupABI,
        'prepareInstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginSetupABI, 'prepareInstallation', TMode>(
    {
      abi: iPluginSetupABI,
      functionName: 'prepareInstallation',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function useIPluginSetupPrepareUninstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginSetupABI,
          'prepareUninstallation'
        >['request']['abi'],
        'prepareUninstallation',
        TMode
      > & { functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<
        typeof iPluginSetupABI,
        'prepareUninstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<
    typeof iPluginSetupABI,
    'prepareUninstallation',
    TMode
  >({
    abi: iPluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function useIPluginSetupPrepareUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginSetupABI,
          'prepareUpdate'
        >['request']['abi'],
        'prepareUpdate',
        TMode
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate', TMode> & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginSetupABI, 'prepareUpdate', TMode>({
    abi: iPluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function usePrepareIPluginSetupWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginSetupABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginSetupABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePrepareIPluginSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPluginSetupABI,
      'prepareInstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPluginSetupABI,
    'prepareInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePrepareIPluginSetupPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPluginSetupABI,
      'prepareUninstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPluginSetupABI,
    'prepareUninstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePrepareIPluginSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPubkeyResolverABI}__.
 */
export function useIPubkeyResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPubkeyResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPubkeyResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPubkeyResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iPubkeyResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPubkeyResolverABI}__ and `functionName` set to `"pubkey"`.
 */
export function useIPubkeyResolverPubkey<
  TFunctionName extends 'pubkey',
  TSelectData = ReadContractResult<typeof iPubkeyResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPubkeyResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPubkeyResolverABI,
    functionName: 'pubkey',
    ...config,
  } as UseContractReadConfig<
    typeof iPubkeyResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPubkeyResolverABI}__.
 */
export function useIPubkeyResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iPubkeyResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iPubkeyResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iPubkeyResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPubkeyResolverABI}__ and `eventName` set to `"PubkeyChanged"`.
 */
export function useIPubkeyResolverPubkeyChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iPubkeyResolverABI, 'PubkeyChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iPubkeyResolverABI,
    eventName: 'PubkeyChanged',
    ...config,
  } as UseContractEventConfig<typeof iPubkeyResolverABI, 'PubkeyChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTextResolverABI}__.
 */
export function useITextResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iTextResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTextResolverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iTextResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iTextResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTextResolverABI}__ and `functionName` set to `"text"`.
 */
export function useITextResolverText<
  TFunctionName extends 'text',
  TSelectData = ReadContractResult<typeof iTextResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTextResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTextResolverABI,
    functionName: 'text',
    ...config,
  } as UseContractReadConfig<
    typeof iTextResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTextResolverABI}__.
 */
export function useITextResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iTextResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTextResolverABI,
    ...config,
  } as UseContractEventConfig<typeof iTextResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTextResolverABI}__ and `eventName` set to `"TextChanged"`.
 */
export function useITextResolverTextChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iTextResolverABI, 'TextChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTextResolverABI,
    eventName: 'TextChanged',
    ...config,
  } as UseContractEventConfig<typeof iTextResolverABI, 'TextChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iVotesABI, ...config } as UseContractReadConfig<
    typeof iVotesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iVotesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iVotesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iVotesABI, TFunctionName, TMode>({
    abi: iVotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesDelegate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotesABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof iVotesABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesABI, 'delegate', TMode>({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotesABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof iVotesABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesABI, 'delegateBySig', TMode>({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function usePrepareIVotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesUpgradeableDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesUpgradeableGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesUpgradeableGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesUpgradeableGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotesUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iVotesUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iVotesUpgradeableABI, TFunctionName, TMode>({
    abi: iVotesUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesUpgradeableDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotesUpgradeableABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesUpgradeableABI, 'delegate', TMode>({
    abi: iVotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesUpgradeableDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotesUpgradeableABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof iVotesUpgradeableABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesUpgradeableABI, 'delegateBySig', TMode>({
    abi: iVotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function usePrepareIVotesUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesUpgradeableDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesUpgradeableDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotesUpgradeableABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iVotesUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof iVotesUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesUpgradeableDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesUpgradeableDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iVotesUpgradeableABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoParamsABI}__.
 */
export function useDaoParamsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoParamsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoParamsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: daoParamsABI,
    ...config,
  } as UseContractReadConfig<typeof daoParamsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoParamsABI}__ and `functionName` set to `"DENOMINATOR_PPM"`.
 */
export function useDaoParamsDenominatorPpm<
  TFunctionName extends 'DENOMINATOR_PPM',
  TSelectData = ReadContractResult<typeof daoParamsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoParamsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoParamsABI,
    functionName: 'DENOMINATOR_PPM',
    ...config,
  } as UseContractReadConfig<typeof daoParamsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__.
 */
export function useIntegrationBaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"DENOMINATOR_PPM"`.
 */
export function useIntegrationBaseDenominatorPpm<
  TFunctionName extends 'DENOMINATOR_PPM',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'DENOMINATOR_PPM',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useIntegrationBaseIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useIntegrationBaseExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useIntegrationBaseExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useIntegrationBaseExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"expectedPurchaseReturn"`.
 */
export function useIntegrationBaseExpectedPurchaseReturn<
  TFunctionName extends 'expectedPurchaseReturn',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'expectedPurchaseReturn',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"expectedSaleReturn"`.
 */
export function useIntegrationBaseExpectedSaleReturn<
  TFunctionName extends 'expectedSaleReturn',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'expectedSaleReturn',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useIntegrationBaseTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useIntegrationBaseTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useIntegrationBaseTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useIntegrationBaseTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useIntegrationBaseTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof integrationBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof integrationBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationBaseABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<
    typeof integrationBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__.
 */
export function useIntegrationBaseWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof integrationBaseABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, TFunctionName, TMode>({
    abi: integrationBaseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createAgents"`.
 */
export function useIntegrationBaseCreateAgents<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'createAgents'
        >['request']['abi'],
        'createAgents',
        TMode
      > & { functionName?: 'createAgents' }
    : UseContractWriteConfig<
        typeof integrationBaseABI,
        'createAgents',
        TMode
      > & {
        abi?: never
        functionName?: 'createAgents'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'createAgents', TMode>({
    abi: integrationBaseABI,
    functionName: 'createAgents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createFork"`.
 */
export function useIntegrationBaseCreateFork<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'createFork'
        >['request']['abi'],
        'createFork',
        TMode
      > & { functionName?: 'createFork' }
    : UseContractWriteConfig<typeof integrationBaseABI, 'createFork', TMode> & {
        abi?: never
        functionName?: 'createFork'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'createFork', TMode>({
    abi: integrationBaseABI,
    functionName: 'createFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createNamedUser"`.
 */
export function useIntegrationBaseCreateNamedUser<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'createNamedUser'
        >['request']['abi'],
        'createNamedUser',
        TMode
      > & { functionName?: 'createNamedUser' }
    : UseContractWriteConfig<
        typeof integrationBaseABI,
        'createNamedUser',
        TMode
      > & {
        abi?: never
        functionName?: 'createNamedUser'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'createNamedUser', TMode>({
    abi: integrationBaseABI,
    functionName: 'createNamedUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createUsers"`.
 */
export function useIntegrationBaseCreateUsers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'createUsers'
        >['request']['abi'],
        'createUsers',
        TMode
      > & { functionName?: 'createUsers' }
    : UseContractWriteConfig<
        typeof integrationBaseABI,
        'createUsers',
        TMode
      > & {
        abi?: never
        functionName?: 'createUsers'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'createUsers', TMode>({
    abi: integrationBaseABI,
    functionName: 'createUsers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"deployContracts"`.
 */
export function useIntegrationBaseDeployContracts<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'deployContracts'
        >['request']['abi'],
        'deployContracts',
        TMode
      > & { functionName?: 'deployContracts' }
    : UseContractWriteConfig<
        typeof integrationBaseABI,
        'deployContracts',
        TMode
      > & {
        abi?: never
        functionName?: 'deployContracts'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'deployContracts', TMode>({
    abi: integrationBaseABI,
    functionName: 'deployContracts',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"deployDAO"`.
 */
export function useIntegrationBaseDeployDao<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'deployDAO'
        >['request']['abi'],
        'deployDAO',
        TMode
      > & { functionName?: 'deployDAO' }
    : UseContractWriteConfig<typeof integrationBaseABI, 'deployDAO', TMode> & {
        abi?: never
        functionName?: 'deployDAO'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'deployDAO', TMode>({
    abi: integrationBaseABI,
    functionName: 'deployDAO',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"failed"`.
 */
export function useIntegrationBaseFailed<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'failed'
        >['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof integrationBaseABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'failed', TMode>({
    abi: integrationBaseABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function useIntegrationBaseGetNextUserAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'getNextUserAddress'
        >['request']['abi'],
        'getNextUserAddress',
        TMode
      > & { functionName?: 'getNextUserAddress' }
    : UseContractWriteConfig<
        typeof integrationBaseABI,
        'getNextUserAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'getNextUserAddress'
      } = {} as any,
) {
  return useContractWrite<
    typeof integrationBaseABI,
    'getNextUserAddress',
    TMode
  >({
    abi: integrationBaseABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"hatch"`.
 */
export function useIntegrationBaseHatch<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'hatch'
        >['request']['abi'],
        'hatch',
        TMode
      > & { functionName?: 'hatch' }
    : UseContractWriteConfig<typeof integrationBaseABI, 'hatch', TMode> & {
        abi?: never
        functionName?: 'hatch'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'hatch', TMode>({
    abi: integrationBaseABI,
    functionName: 'hatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"setUp"`.
 */
export function useIntegrationBaseSetUp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'setUp'
        >['request']['abi'],
        'setUp',
        TMode
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<typeof integrationBaseABI, 'setUp', TMode> & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'setUp', TMode>({
    abi: integrationBaseABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"setupRepo"`.
 */
export function useIntegrationBaseSetupRepo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof integrationBaseABI,
          'setupRepo'
        >['request']['abi'],
        'setupRepo',
        TMode
      > & { functionName?: 'setupRepo' }
    : UseContractWriteConfig<typeof integrationBaseABI, 'setupRepo', TMode> & {
        abi?: never
        functionName?: 'setupRepo'
      } = {} as any,
) {
  return useContractWrite<typeof integrationBaseABI, 'setupRepo', TMode>({
    abi: integrationBaseABI,
    functionName: 'setupRepo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__.
 */
export function usePrepareIntegrationBaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createAgents"`.
 */
export function usePrepareIntegrationBaseCreateAgents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'createAgents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'createAgents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'createAgents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createFork"`.
 */
export function usePrepareIntegrationBaseCreateFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'createFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'createFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'createFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createNamedUser"`.
 */
export function usePrepareIntegrationBaseCreateNamedUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'createNamedUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'createNamedUser',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof integrationBaseABI,
    'createNamedUser'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"createUsers"`.
 */
export function usePrepareIntegrationBaseCreateUsers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'createUsers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'createUsers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'createUsers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"deployContracts"`.
 */
export function usePrepareIntegrationBaseDeployContracts(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'deployContracts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'deployContracts',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof integrationBaseABI,
    'deployContracts'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"deployDAO"`.
 */
export function usePrepareIntegrationBaseDeployDao(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'deployDAO'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'deployDAO',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'deployDAO'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareIntegrationBaseFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'failed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function usePrepareIntegrationBaseGetNextUserAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof integrationBaseABI,
      'getNextUserAddress'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof integrationBaseABI,
    'getNextUserAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"hatch"`.
 */
export function usePrepareIntegrationBaseHatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'hatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'hatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'hatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareIntegrationBaseSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'setUp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'setUp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationBaseABI}__ and `functionName` set to `"setupRepo"`.
 */
export function usePrepareIntegrationBaseSetupRepo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationBaseABI, 'setupRepo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationBaseABI,
    functionName: 'setupRepo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationBaseABI, 'setupRepo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__.
 */
export function useIntegrationBaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log"`.
 */
export function useIntegrationBaseLogEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_address"`.
 */
export function useIntegrationBaseLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_array"`.
 */
export function useIntegrationBaseLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useIntegrationBaseLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useIntegrationBaseLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_int"`.
 */
export function useIntegrationBaseLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useIntegrationBaseLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useIntegrationBaseLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useIntegrationBaseLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useIntegrationBaseLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useIntegrationBaseLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<
    typeof integrationBaseABI,
    'log_named_decimal_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useIntegrationBaseLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<
    typeof integrationBaseABI,
    'log_named_decimal_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useIntegrationBaseLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useIntegrationBaseLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useIntegrationBaseLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_string"`.
 */
export function useIntegrationBaseLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"log_uint"`.
 */
export function useIntegrationBaseLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationBaseABI}__ and `eventName` set to `"logs"`.
 */
export function useIntegrationBaseLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationBaseABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationBaseABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof integrationBaseABI, 'logs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function useInterfaceBasedRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interfaceBasedRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"UPGRADE_REGISTRY_PERMISSION_ID"`.
 */
export function useInterfaceBasedRegistryUpgradeRegistryPermissionId<
  TFunctionName extends 'UPGRADE_REGISTRY_PERMISSION_ID',
  TSelectData = ReadContractResult<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interfaceBasedRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'UPGRADE_REGISTRY_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"dao"`.
 */
export function useInterfaceBasedRegistryDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interfaceBasedRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"entries"`.
 */
export function useInterfaceBasedRegistryEntries<
  TFunctionName extends 'entries',
  TSelectData = ReadContractResult<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interfaceBasedRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'entries',
    ...config,
  } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useInterfaceBasedRegistryProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interfaceBasedRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"targetInterfaceId"`.
 */
export function useInterfaceBasedRegistryTargetInterfaceId<
  TFunctionName extends 'targetInterfaceId',
  TSelectData = ReadContractResult<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interfaceBasedRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'targetInterfaceId',
    ...config,
  } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function useInterfaceBasedRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interfaceBasedRegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof interfaceBasedRegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TMode
  >({ abi: interfaceBasedRegistryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useInterfaceBasedRegistryUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interfaceBasedRegistryABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof interfaceBasedRegistryABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof interfaceBasedRegistryABI, 'upgradeTo', TMode>(
    {
      abi: interfaceBasedRegistryABI,
      functionName: 'upgradeTo',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useInterfaceBasedRegistryUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interfaceBasedRegistryABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof interfaceBasedRegistryABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof interfaceBasedRegistryABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: interfaceBasedRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function usePrepareInterfaceBasedRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interfaceBasedRegistryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interfaceBasedRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareInterfaceBasedRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interfaceBasedRegistryABI,
      'upgradeTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interfaceBasedRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interfaceBasedRegistryABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareInterfaceBasedRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interfaceBasedRegistryABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interfaceBasedRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interfaceBasedRegistryABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function useInterfaceBasedRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useInterfaceBasedRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useInterfaceBasedRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof interfaceBasedRegistryABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInterfaceBasedRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useInterfaceBasedRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"UPDATE_VOTING_SETTINGS_PERMISSION_ID"`.
 */
export function useMajorityVotingBaseUpdateVotingSettingsPermissionId<
  TFunctionName extends 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 */
export function useMajorityVotingBaseUpgradePluginPermissionId<
  TFunctionName extends 'UPGRADE_PLUGIN_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"canExecute"`.
 */
export function useMajorityVotingBaseCanExecute<
  TFunctionName extends 'canExecute',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'canExecute',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"canVote"`.
 */
export function useMajorityVotingBaseCanVote<
  TFunctionName extends 'canVote',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"dao"`.
 */
export function useMajorityVotingBaseDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"getProposal"`.
 */
export function useMajorityVotingBaseGetProposal<
  TFunctionName extends 'getProposal',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'getProposal',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"getVoteOption"`.
 */
export function useMajorityVotingBaseGetVoteOption<
  TFunctionName extends 'getVoteOption',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"implementation"`.
 */
export function useMajorityVotingBaseImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isMinParticipationReached"`.
 */
export function useMajorityVotingBaseIsMinParticipationReached<
  TFunctionName extends 'isMinParticipationReached',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 */
export function useMajorityVotingBaseIsSupportThresholdReached<
  TFunctionName extends 'isSupportThresholdReached',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 */
export function useMajorityVotingBaseIsSupportThresholdReachedEarly<
  TFunctionName extends 'isSupportThresholdReachedEarly',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minDuration"`.
 */
export function useMajorityVotingBaseMinDuration<
  TFunctionName extends 'minDuration',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minDuration',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minParticipation"`.
 */
export function useMajorityVotingBaseMinParticipation<
  TFunctionName extends 'minParticipation',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minProposerVotingPower"`.
 */
export function useMajorityVotingBaseMinProposerVotingPower<
  TFunctionName extends 'minProposerVotingPower',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minProposerVotingPower',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"pluginType"`.
 */
export function useMajorityVotingBasePluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useMajorityVotingBaseProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMajorityVotingBaseProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"supportThreshold"`.
 */
export function useMajorityVotingBaseSupportThreshold<
  TFunctionName extends 'supportThreshold',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMajorityVotingBaseSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"totalVotingPower"`.
 */
export function useMajorityVotingBaseTotalVotingPower<
  TFunctionName extends 'totalVotingPower',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'totalVotingPower',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"votingMode"`.
 */
export function useMajorityVotingBaseVotingMode<
  TFunctionName extends 'votingMode',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'votingMode',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof majorityVotingBaseABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, TFunctionName, TMode>({
    abi: majorityVotingBaseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"createProposal"`.
 */
export function useMajorityVotingBaseCreateProposal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'createProposal'
        >['request']['abi'],
        'createProposal',
        TMode
      > & { functionName?: 'createProposal' }
    : UseContractWriteConfig<
        typeof majorityVotingBaseABI,
        'createProposal',
        TMode
      > & {
        abi?: never
        functionName?: 'createProposal'
      } = {} as any,
) {
  return useContractWrite<
    typeof majorityVotingBaseABI,
    'createProposal',
    TMode
  >({
    abi: majorityVotingBaseABI,
    functionName: 'createProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"execute"`.
 */
export function useMajorityVotingBaseExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'execute', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function useMajorityVotingBaseUpdateVotingSettings<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'updateVotingSettings'
        >['request']['abi'],
        'updateVotingSettings',
        TMode
      > & { functionName?: 'updateVotingSettings' }
    : UseContractWriteConfig<
        typeof majorityVotingBaseABI,
        'updateVotingSettings',
        TMode
      > & {
        abi?: never
        functionName?: 'updateVotingSettings'
      } = {} as any,
) {
  return useContractWrite<
    typeof majorityVotingBaseABI,
    'updateVotingSettings',
    TMode
  >({
    abi: majorityVotingBaseABI,
    functionName: 'updateVotingSettings',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMajorityVotingBaseUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof majorityVotingBaseABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'upgradeTo', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMajorityVotingBaseUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof majorityVotingBaseABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof majorityVotingBaseABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"vote"`.
 */
export function useMajorityVotingBaseVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'vote'
        >['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'vote', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function usePrepareMajorityVotingBaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"createProposal"`.
 */
export function usePrepareMajorityVotingBaseCreateProposal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof majorityVotingBaseABI,
      'createProposal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'createProposal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    'createProposal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareMajorityVotingBaseExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function usePrepareMajorityVotingBaseUpdateVotingSettings(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof majorityVotingBaseABI,
      'updateVotingSettings'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'updateVotingSettings',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    'updateVotingSettings'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMajorityVotingBaseUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMajorityVotingBaseUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof majorityVotingBaseABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareMajorityVotingBaseVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMajorityVotingBaseAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMajorityVotingBaseBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMajorityVotingBaseInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useMajorityVotingBaseProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useMajorityVotingBaseProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMajorityVotingBaseUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useMajorityVotingBaseVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"VotingSettingsUpdated"`.
 */
export function useMajorityVotingBaseVotingSettingsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof majorityVotingBaseABI,
      'VotingSettingsUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'VotingSettingsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof majorityVotingBaseABI,
    'VotingSettingsUpdated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__.
 */
export function useMarketMakerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"CONFIGURE_PERMISSION_ID"`.
 */
export function useMarketMakerConfigurePermissionId<
  TFunctionName extends 'CONFIGURE_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'CONFIGURE_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"DENOMINATOR_PPM"`.
 */
export function useMarketMakerDenominatorPpm<
  TFunctionName extends 'DENOMINATOR_PPM',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'DENOMINATOR_PPM',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"HATCH_PERMISSION_ID"`.
 */
export function useMarketMakerHatchPermissionId<
  TFunctionName extends 'HATCH_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'HATCH_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"bondedToken"`.
 */
export function useMarketMakerBondedToken<
  TFunctionName extends 'bondedToken',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'bondedToken',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"calculateBurn"`.
 */
export function useMarketMakerCalculateBurn<
  TFunctionName extends 'calculateBurn',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'calculateBurn',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"calculateMint"`.
 */
export function useMarketMakerCalculateMint<
  TFunctionName extends 'calculateMint',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'calculateMint',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"dao"`.
 */
export function useMarketMakerDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"externalToken"`.
 */
export function useMarketMakerExternalToken<
  TFunctionName extends 'externalToken',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'externalToken',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"getCurveParameters"`.
 */
export function useMarketMakerGetCurveParameters<
  TFunctionName extends 'getCurveParameters',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'getCurveParameters',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"isHatched"`.
 */
export function useMarketMakerIsHatched<
  TFunctionName extends 'isHatched',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'isHatched',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"pluginType"`.
 */
export function useMarketMakerPluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"reserveBalance"`.
 */
export function useMarketMakerReserveBalance<
  TFunctionName extends 'reserveBalance',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'reserveBalance',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"reserveRatio"`.
 */
export function useMarketMakerReserveRatio<
  TFunctionName extends 'reserveRatio',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'reserveRatio',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMarketMakerSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMarketMakerTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof marketMakerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketMakerABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof marketMakerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__.
 */
export function useMarketMakerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof marketMakerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, TFunctionName, TMode>({
    abi: marketMakerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"burn"`.
 */
export function useMarketMakerBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof marketMakerABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, 'burn', TMode>({
    abi: marketMakerABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"hatch"`.
 */
export function useMarketMakerHatch<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          'hatch'
        >['request']['abi'],
        'hatch',
        TMode
      > & { functionName?: 'hatch' }
    : UseContractWriteConfig<typeof marketMakerABI, 'hatch', TMode> & {
        abi?: never
        functionName?: 'hatch'
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, 'hatch', TMode>({
    abi: marketMakerABI,
    functionName: 'hatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"initialize"`.
 */
export function useMarketMakerInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof marketMakerABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, 'initialize', TMode>({
    abi: marketMakerABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"mint"`.
 */
export function useMarketMakerMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof marketMakerABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, 'mint', TMode>({
    abi: marketMakerABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"setGovernance"`.
 */
export function useMarketMakerSetGovernance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          'setGovernance'
        >['request']['abi'],
        'setGovernance',
        TMode
      > & { functionName?: 'setGovernance' }
    : UseContractWriteConfig<typeof marketMakerABI, 'setGovernance', TMode> & {
        abi?: never
        functionName?: 'setGovernance'
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, 'setGovernance', TMode>({
    abi: marketMakerABI,
    functionName: 'setGovernance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"sponsoredBurn"`.
 */
export function useMarketMakerSponsoredBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          'sponsoredBurn'
        >['request']['abi'],
        'sponsoredBurn',
        TMode
      > & { functionName?: 'sponsoredBurn' }
    : UseContractWriteConfig<typeof marketMakerABI, 'sponsoredBurn', TMode> & {
        abi?: never
        functionName?: 'sponsoredBurn'
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, 'sponsoredBurn', TMode>({
    abi: marketMakerABI,
    functionName: 'sponsoredBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"sponsoredMint"`.
 */
export function useMarketMakerSponsoredMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketMakerABI,
          'sponsoredMint'
        >['request']['abi'],
        'sponsoredMint',
        TMode
      > & { functionName?: 'sponsoredMint' }
    : UseContractWriteConfig<typeof marketMakerABI, 'sponsoredMint', TMode> & {
        abi?: never
        functionName?: 'sponsoredMint'
      } = {} as any,
) {
  return useContractWrite<typeof marketMakerABI, 'sponsoredMint', TMode>({
    abi: marketMakerABI,
    functionName: 'sponsoredMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__.
 */
export function usePrepareMarketMakerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMarketMakerBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"hatch"`.
 */
export function usePrepareMarketMakerHatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, 'hatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    functionName: 'hatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, 'hatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMarketMakerInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMarketMakerMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"setGovernance"`.
 */
export function usePrepareMarketMakerSetGovernance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, 'setGovernance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    functionName: 'setGovernance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, 'setGovernance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"sponsoredBurn"`.
 */
export function usePrepareMarketMakerSponsoredBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, 'sponsoredBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    functionName: 'sponsoredBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, 'sponsoredBurn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketMakerABI}__ and `functionName` set to `"sponsoredMint"`.
 */
export function usePrepareMarketMakerSponsoredMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketMakerABI, 'sponsoredMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketMakerABI,
    functionName: 'sponsoredMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketMakerABI, 'sponsoredMint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketMakerABI}__.
 */
export function useMarketMakerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof marketMakerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketMakerABI,
    ...config,
  } as UseContractEventConfig<typeof marketMakerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketMakerABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMarketMakerInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketMakerABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketMakerABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof marketMakerABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__.
 */
export function useMockBondedTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useMockBondedTokenClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockBondedTokenDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockBondedTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockBondedTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useMockBondedTokenCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"clock"`.
 */
export function useMockBondedTokenClock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockBondedTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"delegates"`.
 */
export function useMockBondedTokenDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useMockBondedTokenEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'eip712Domain',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useMockBondedTokenGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useMockBondedTokenGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"getVotes"`.
 */
export function useMockBondedTokenGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMockBondedTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockBondedTokenNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useMockBondedTokenNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useMockBondedTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockBondedTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockBondedTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof mockBondedTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBondedTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBondedTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof mockBondedTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__.
 */
export function useMockBondedTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof mockBondedTokenABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, TFunctionName, TMode>({
    abi: mockBondedTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMockBondedTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof mockBondedTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'approve', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useMockBondedTokenBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof mockBondedTokenABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'burn', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useMockBondedTokenBurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof mockBondedTokenABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'burnFrom', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMockBondedTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof mockBondedTokenABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof mockBondedTokenABI,
    'decreaseAllowance',
    TMode
  >({
    abi: mockBondedTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function useMockBondedTokenDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof mockBondedTokenABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'delegate', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useMockBondedTokenDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof mockBondedTokenABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'delegateBySig', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMockBondedTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof mockBondedTokenABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof mockBondedTokenABI,
    'increaseAllowance',
    TMode
  >({
    abi: mockBondedTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useMockBondedTokenMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof mockBondedTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'mint', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useMockBondedTokenPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof mockBondedTokenABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'permit', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMockBondedTokenRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof mockBondedTokenABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof mockBondedTokenABI,
    'renounceOwnership',
    TMode
  >({
    abi: mockBondedTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockBondedTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof mockBondedTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'transfer', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockBondedTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof mockBondedTokenABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof mockBondedTokenABI, 'transferFrom', TMode>({
    abi: mockBondedTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMockBondedTokenTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockBondedTokenABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof mockBondedTokenABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof mockBondedTokenABI,
    'transferOwnership',
    TMode
  >({
    abi: mockBondedTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__.
 */
export function usePrepareMockBondedTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockBondedTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMockBondedTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareMockBondedTokenBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMockBondedTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockBondedTokenABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBondedTokenABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareMockBondedTokenDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareMockBondedTokenDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBondedTokenABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMockBondedTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockBondedTokenABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBondedTokenABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMockBondedTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMockBondedTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMockBondedTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockBondedTokenABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBondedTokenABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockBondedTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockBondedTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBondedTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBondedTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMockBondedTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockBondedTokenABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBondedTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBondedTokenABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBondedTokenABI}__.
 */
export function useMockBondedTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockBondedTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBondedTokenABI,
    ...config,
  } as UseContractEventConfig<typeof mockBondedTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBondedTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockBondedTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBondedTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBondedTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof mockBondedTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBondedTokenABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useMockBondedTokenDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBondedTokenABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBondedTokenABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof mockBondedTokenABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBondedTokenABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useMockBondedTokenDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBondedTokenABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBondedTokenABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof mockBondedTokenABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBondedTokenABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useMockBondedTokenEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBondedTokenABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBondedTokenABI,
    eventName: 'EIP712DomainChanged',
    ...config,
  } as UseContractEventConfig<typeof mockBondedTokenABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBondedTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMockBondedTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBondedTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBondedTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof mockBondedTokenABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBondedTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockBondedTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBondedTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBondedTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof mockBondedTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__.
 */
export function useMockUsdcRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockUsdcAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockUsdcBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockUsdcDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"name"`.
 */
export function useMockUsdcName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"owner"`.
 */
export function useMockUsdcOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockUsdcSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockUsdcTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof mockUsdcABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockUsdcABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof mockUsdcABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__.
 */
export function useMockUsdcWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockUsdcABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, TFunctionName, TMode>({
    abi: mockUsdcABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"approve"`.
 */
export function useMockUsdcApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'approve', TMode>({
    abi: mockUsdcABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMockUsdcDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'decreaseAllowance', TMode>({
    abi: mockUsdcABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMockUsdcIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'increaseAllowance', TMode>({
    abi: mockUsdcABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"mint"`.
 */
export function useMockUsdcMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'mint', TMode>({
    abi: mockUsdcABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMockUsdcRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'renounceOwnership', TMode>({
    abi: mockUsdcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockUsdcTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'transfer', TMode>({
    abi: mockUsdcABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockUsdcTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'transferFrom', TMode>({
    abi: mockUsdcABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMockUsdcTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockUsdcABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof mockUsdcABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof mockUsdcABI, 'transferOwnership', TMode>({
    abi: mockUsdcABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__.
 */
export function usePrepareMockUsdcWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockUsdcApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMockUsdcDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMockUsdcIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMockUsdcMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMockUsdcRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockUsdcTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockUsdcTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockUsdcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMockUsdcTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockUsdcABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockUsdcABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockUsdcABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockUsdcABI}__.
 */
export function useMockUsdcEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockUsdcABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockUsdcABI,
    ...config,
  } as UseContractEventConfig<typeof mockUsdcABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockUsdcABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockUsdcApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockUsdcABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockUsdcABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof mockUsdcABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockUsdcABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMockUsdcOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof mockUsdcABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockUsdcABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof mockUsdcABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockUsdcABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockUsdcTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockUsdcABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockUsdcABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof mockUsdcABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePrbTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof prbTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: prbTestABI,
    ...config,
  } as UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link prbTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function usePrbTestIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof prbTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: prbTestABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePrbTestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof prbTestABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof prbTestABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof prbTestABI, TFunctionName, TMode>({
    abi: prbTestABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link prbTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrbTestFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof prbTestABI,
          'failed'
        >['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof prbTestABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof prbTestABI, 'failed', TMode>({
    abi: prbTestABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePreparePrbTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof prbTestABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: prbTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof prbTestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link prbTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePreparePrbTestFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof prbTestABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: prbTestABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof prbTestABI, 'failed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePrbTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"Log"`.
 */
export function usePrbTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'Log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'Log',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'Log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogAddress"`.
 */
export function usePrbTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogAddress'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogAddress',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogArray"`.
 */
export function usePrbTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogArray'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogArray',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogArray'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogBytes"`.
 */
export function usePrbTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogBytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogBytes',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogBytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogBytes32"`.
 */
export function usePrbTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogBytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogBytes32',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogBytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogInt256"`.
 */
export function usePrbTestLogInt256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogInt256'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogInt256',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogInt256'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedAddress"`.
 */
export function usePrbTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogNamedAddress'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogNamedAddress',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogNamedAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedArray"`.
 */
export function usePrbTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogNamedArray'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogNamedArray',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogNamedArray'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedBytes"`.
 */
export function usePrbTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogNamedBytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogNamedBytes',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogNamedBytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedBytes32"`.
 */
export function usePrbTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogNamedBytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogNamedBytes32',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogNamedBytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedInt256"`.
 */
export function usePrbTestLogNamedInt256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogNamedInt256'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogNamedInt256',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogNamedInt256'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedString"`.
 */
export function usePrbTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogNamedString'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogNamedString',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogNamedString'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedUint256"`.
 */
export function usePrbTestLogNamedUint256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogNamedUint256'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogNamedUint256',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogNamedUint256'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogString"`.
 */
export function usePrbTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogString'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogString',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogString'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogUint256"`.
 */
export function usePrbTestLogUint256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, 'LogUint256'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: 'LogUint256',
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, 'LogUint256'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionLibABI}__.
 */
export function usePermissionLibRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof permissionLibABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionLibABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionLibABI,
    ...config,
  } as UseContractReadConfig<
    typeof permissionLibABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionLibABI}__ and `functionName` set to `"NO_CONDITION"`.
 */
export function usePermissionLibNoCondition<
  TFunctionName extends 'NO_CONDITION',
  TSelectData = ReadContractResult<typeof permissionLibABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionLibABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionLibABI,
    functionName: 'NO_CONDITION',
    ...config,
  } as UseContractReadConfig<
    typeof permissionLibABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof permissionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof permissionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof permissionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 */
export function usePermissionManagerRootPermissionId<
  TFunctionName extends 'ROOT_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof permissionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof permissionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionManagerABI,
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof permissionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"isGranted"`.
 */
export function usePermissionManagerIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof permissionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof permissionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionManagerABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<
    typeof permissionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof permissionManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, TFunctionName, TMode>({
    abi: permissionManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePermissionManagerApplyMultiTargetPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'applyMultiTargetPermissions'
        >['request']['abi'],
        'applyMultiTargetPermissions',
        TMode
      > & { functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<
        typeof permissionManagerABI,
        'applyMultiTargetPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<
    typeof permissionManagerABI,
    'applyMultiTargetPermissions',
    TMode
  >({
    abi: permissionManagerABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePermissionManagerApplySingleTargetPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'applySingleTargetPermissions'
        >['request']['abi'],
        'applySingleTargetPermissions',
        TMode
      > & { functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<
        typeof permissionManagerABI,
        'applySingleTargetPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<
    typeof permissionManagerABI,
    'applySingleTargetPermissions',
    TMode
  >({
    abi: permissionManagerABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grant"`.
 */
export function usePermissionManagerGrant<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'grant'
        >['request']['abi'],
        'grant',
        TMode
      > & { functionName?: 'grant' }
    : UseContractWriteConfig<typeof permissionManagerABI, 'grant', TMode> & {
        abi?: never
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, 'grant', TMode>({
    abi: permissionManagerABI,
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePermissionManagerGrantWithCondition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'grantWithCondition'
        >['request']['abi'],
        'grantWithCondition',
        TMode
      > & { functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<
        typeof permissionManagerABI,
        'grantWithCondition',
        TMode
      > & {
        abi?: never
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<
    typeof permissionManagerABI,
    'grantWithCondition',
    TMode
  >({
    abi: permissionManagerABI,
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"revoke"`.
 */
export function usePermissionManagerRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'revoke'
        >['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof permissionManagerABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, 'revoke', TMode>({
    abi: permissionManagerABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePreparePermissionManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePreparePermissionManagerApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof permissionManagerABI,
      'applyMultiTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    'applyMultiTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePreparePermissionManagerApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof permissionManagerABI,
      'applySingleTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    'applySingleTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grant"`.
 */
export function usePreparePermissionManagerGrant(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePreparePermissionManagerGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof permissionManagerABI,
      'grantWithCondition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    'grantWithCondition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"revoke"`.
 */
export function usePreparePermissionManagerRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'revoke'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Granted"`.
 */
export function usePermissionManagerGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, 'Granted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    eventName: 'Granted',
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, 'Granted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePermissionManagerInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Revoked"`.
 */
export function usePermissionManagerRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, 'Revoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginCloneableABI}__.
 */
export function usePluginCloneableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginCloneableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginCloneableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginCloneableABI,
    ...config,
  } as UseContractReadConfig<
    typeof pluginCloneableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginCloneableABI}__ and `functionName` set to `"dao"`.
 */
export function usePluginCloneableDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof pluginCloneableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginCloneableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginCloneableABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof pluginCloneableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginCloneableABI}__ and `functionName` set to `"pluginType"`.
 */
export function usePluginCloneablePluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof pluginCloneableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginCloneableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginCloneableABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<
    typeof pluginCloneableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginCloneableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginCloneableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof pluginCloneableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginCloneableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginCloneableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof pluginCloneableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginCloneableABI}__.
 */
export function usePluginCloneableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pluginCloneableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginCloneableABI,
    ...config,
  } as UseContractEventConfig<typeof pluginCloneableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginCloneableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePluginCloneableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginCloneableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginCloneableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pluginCloneableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__.
 */
export function usePluginRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"MAINTAINER_PERMISSION_ID"`.
 */
export function usePluginRepoMaintainerPermissionId<
  TFunctionName extends 'MAINTAINER_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'MAINTAINER_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 */
export function usePluginRepoRootPermissionId<
  TFunctionName extends 'ROOT_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"UPGRADE_REPO_PERMISSION_ID"`.
 */
export function usePluginRepoUpgradeRepoPermissionId<
  TFunctionName extends 'UPGRADE_REPO_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'UPGRADE_REPO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"buildCount"`.
 */
export function usePluginRepoBuildCount<
  TFunctionName extends 'buildCount',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'buildCount',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"getLatestVersion"`.
 */
export function usePluginRepoGetLatestVersion<
  TFunctionName extends 'getLatestVersion',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'getLatestVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"getVersion"`.
 */
export function usePluginRepoGetVersion<
  TFunctionName extends 'getVersion',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'getVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"isGranted"`.
 */
export function usePluginRepoIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"latestRelease"`.
 */
export function usePluginRepoLatestRelease<
  TFunctionName extends 'latestRelease',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'latestRelease',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function usePluginRepoProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginRepoSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__.
 */
export function usePluginRepoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof pluginRepoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, TFunctionName, TMode>({
    abi: pluginRepoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePluginRepoApplyMultiTargetPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'applyMultiTargetPermissions'
        >['request']['abi'],
        'applyMultiTargetPermissions',
        TMode
      > & { functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<
        typeof pluginRepoABI,
        'applyMultiTargetPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginRepoABI,
    'applyMultiTargetPermissions',
    TMode
  >({
    abi: pluginRepoABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePluginRepoApplySingleTargetPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'applySingleTargetPermissions'
        >['request']['abi'],
        'applySingleTargetPermissions',
        TMode
      > & { functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<
        typeof pluginRepoABI,
        'applySingleTargetPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginRepoABI,
    'applySingleTargetPermissions',
    TMode
  >({
    abi: pluginRepoABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"createVersion"`.
 */
export function usePluginRepoCreateVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'createVersion'
        >['request']['abi'],
        'createVersion',
        TMode
      > & { functionName?: 'createVersion' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'createVersion', TMode> & {
        abi?: never
        functionName?: 'createVersion'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'createVersion', TMode>({
    abi: pluginRepoABI,
    functionName: 'createVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grant"`.
 */
export function usePluginRepoGrant<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'grant'
        >['request']['abi'],
        'grant',
        TMode
      > & { functionName?: 'grant' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'grant', TMode> & {
        abi?: never
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'grant', TMode>({
    abi: pluginRepoABI,
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePluginRepoGrantWithCondition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'grantWithCondition'
        >['request']['abi'],
        'grantWithCondition',
        TMode
      > & { functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<
        typeof pluginRepoABI,
        'grantWithCondition',
        TMode
      > & {
        abi?: never
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'grantWithCondition', TMode>({
    abi: pluginRepoABI,
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"initialize"`.
 */
export function usePluginRepoInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'initialize', TMode>({
    abi: pluginRepoABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"revoke"`.
 */
export function usePluginRepoRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'revoke'
        >['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'revoke', TMode>({
    abi: pluginRepoABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 */
export function usePluginRepoUpdateReleaseMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'updateReleaseMetadata'
        >['request']['abi'],
        'updateReleaseMetadata',
        TMode
      > & { functionName?: 'updateReleaseMetadata' }
    : UseContractWriteConfig<
        typeof pluginRepoABI,
        'updateReleaseMetadata',
        TMode
      > & {
        abi?: never
        functionName?: 'updateReleaseMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'updateReleaseMetadata', TMode>(
    {
      abi: pluginRepoABI,
      functionName: 'updateReleaseMetadata',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePluginRepoUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'upgradeTo', TMode>({
    abi: pluginRepoABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePluginRepoUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof pluginRepoABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'upgradeToAndCall', TMode>({
    abi: pluginRepoABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__.
 */
export function usePreparePluginRepoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePreparePluginRepoApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginRepoABI,
      'applyMultiTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoABI,
    'applyMultiTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePreparePluginRepoApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginRepoABI,
      'applySingleTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoABI,
    'applySingleTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"createVersion"`.
 */
export function usePreparePluginRepoCreateVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'createVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'createVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'createVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grant"`.
 */
export function usePreparePluginRepoGrant(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'grant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePreparePluginRepoGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'grantWithCondition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoABI,
    'grantWithCondition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePluginRepoInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"revoke"`.
 */
export function usePreparePluginRepoRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 */
export function usePreparePluginRepoUpdateReleaseMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginRepoABI,
      'updateReleaseMetadata'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'updateReleaseMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoABI,
    'updateReleaseMetadata'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePreparePluginRepoUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePreparePluginRepoUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__.
 */
export function usePluginRepoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function usePluginRepoAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function usePluginRepoBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Granted"`.
 */
export function usePluginRepoGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'Granted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'Granted',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Granted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePluginRepoInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"ReleaseMetadataUpdated"`.
 */
export function usePluginRepoReleaseMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'ReleaseMetadataUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'ReleaseMetadataUpdated',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'ReleaseMetadataUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Revoked"`.
 */
export function usePluginRepoRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'Revoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Upgraded"`.
 */
export function usePluginRepoUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"VersionCreated"`.
 */
export function usePluginRepoVersionCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'VersionCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    eventName: 'VersionCreated',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'VersionCreated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoFactoryABI}__.
 */
export function usePluginRepoFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginRepoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoFactoryABI}__ and `functionName` set to `"pluginRepoBase"`.
 */
export function usePluginRepoFactoryPluginRepoBase<
  TFunctionName extends 'pluginRepoBase',
  TSelectData = ReadContractResult<typeof pluginRepoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoFactoryABI,
    functionName: 'pluginRepoBase',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoFactoryABI}__ and `functionName` set to `"pluginRepoRegistry"`.
 */
export function usePluginRepoFactoryPluginRepoRegistry<
  TFunctionName extends 'pluginRepoRegistry',
  TSelectData = ReadContractResult<typeof pluginRepoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoFactoryABI,
    functionName: 'pluginRepoRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoFactoryABI}__.
 */
export function usePluginRepoFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof pluginRepoFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoFactoryABI, TFunctionName, TMode>({
    abi: pluginRepoFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoFactoryABI}__ and `functionName` set to `"createPluginRepo"`.
 */
export function usePluginRepoFactoryCreatePluginRepo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoFactoryABI,
          'createPluginRepo'
        >['request']['abi'],
        'createPluginRepo',
        TMode
      > & { functionName?: 'createPluginRepo' }
    : UseContractWriteConfig<
        typeof pluginRepoFactoryABI,
        'createPluginRepo',
        TMode
      > & {
        abi?: never
        functionName?: 'createPluginRepo'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginRepoFactoryABI,
    'createPluginRepo',
    TMode
  >({
    abi: pluginRepoFactoryABI,
    functionName: 'createPluginRepo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoFactoryABI}__ and `functionName` set to `"createPluginRepoWithFirstVersion"`.
 */
export function usePluginRepoFactoryCreatePluginRepoWithFirstVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoFactoryABI,
          'createPluginRepoWithFirstVersion'
        >['request']['abi'],
        'createPluginRepoWithFirstVersion',
        TMode
      > & { functionName?: 'createPluginRepoWithFirstVersion' }
    : UseContractWriteConfig<
        typeof pluginRepoFactoryABI,
        'createPluginRepoWithFirstVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'createPluginRepoWithFirstVersion'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginRepoFactoryABI,
    'createPluginRepoWithFirstVersion',
    TMode
  >({
    abi: pluginRepoFactoryABI,
    functionName: 'createPluginRepoWithFirstVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoFactoryABI}__.
 */
export function usePreparePluginRepoFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoFactoryABI}__ and `functionName` set to `"createPluginRepo"`.
 */
export function usePreparePluginRepoFactoryCreatePluginRepo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginRepoFactoryABI,
      'createPluginRepo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoFactoryABI,
    functionName: 'createPluginRepo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoFactoryABI,
    'createPluginRepo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoFactoryABI}__ and `functionName` set to `"createPluginRepoWithFirstVersion"`.
 */
export function usePreparePluginRepoFactoryCreatePluginRepoWithFirstVersion(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginRepoFactoryABI,
      'createPluginRepoWithFirstVersion'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoFactoryABI,
    functionName: 'createPluginRepoWithFirstVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoFactoryABI,
    'createPluginRepoWithFirstVersion'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePluginRepoRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"REGISTER_PLUGIN_REPO_PERMISSION_ID"`.
 */
export function usePluginRepoRegistryRegisterPluginRepoPermissionId<
  TFunctionName extends 'REGISTER_PLUGIN_REPO_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'REGISTER_PLUGIN_REPO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"UPGRADE_REGISTRY_PERMISSION_ID"`.
 */
export function usePluginRepoRegistryUpgradeRegistryPermissionId<
  TFunctionName extends 'UPGRADE_REGISTRY_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'UPGRADE_REGISTRY_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"dao"`.
 */
export function usePluginRepoRegistryDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"entries"`.
 */
export function usePluginRepoRegistryEntries<
  TFunctionName extends 'entries',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'entries',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function usePluginRepoRegistryProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"subdomainRegistrar"`.
 */
export function usePluginRepoRegistrySubdomainRegistrar<
  TFunctionName extends 'subdomainRegistrar',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'subdomainRegistrar',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"targetInterfaceId"`.
 */
export function usePluginRepoRegistryTargetInterfaceId<
  TFunctionName extends 'targetInterfaceId',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginRepoRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'targetInterfaceId',
    ...config,
  } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePluginRepoRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoRegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof pluginRepoRegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, TFunctionName, TMode>({
    abi: pluginRepoRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePluginRepoRegistryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoRegistryABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof pluginRepoRegistryABI,
        'initialize',
        TMode
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, 'initialize', TMode>({
    abi: pluginRepoRegistryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"registerPluginRepo"`.
 */
export function usePluginRepoRegistryRegisterPluginRepo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoRegistryABI,
          'registerPluginRepo'
        >['request']['abi'],
        'registerPluginRepo',
        TMode
      > & { functionName?: 'registerPluginRepo' }
    : UseContractWriteConfig<
        typeof pluginRepoRegistryABI,
        'registerPluginRepo',
        TMode
      > & {
        abi?: never
        functionName?: 'registerPluginRepo'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginRepoRegistryABI,
    'registerPluginRepo',
    TMode
  >({
    abi: pluginRepoRegistryABI,
    functionName: 'registerPluginRepo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePluginRepoRegistryUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoRegistryABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof pluginRepoRegistryABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, 'upgradeTo', TMode>({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePluginRepoRegistryUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginRepoRegistryABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof pluginRepoRegistryABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginRepoRegistryABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePreparePluginRepoRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePluginRepoRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoRegistryABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"registerPluginRepo"`.
 */
export function usePreparePluginRepoRegistryRegisterPluginRepo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginRepoRegistryABI,
      'registerPluginRepo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'registerPluginRepo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoRegistryABI,
    'registerPluginRepo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePreparePluginRepoRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePreparePluginRepoRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginRepoRegistryABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginRepoRegistryABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePluginRepoRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function usePluginRepoRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function usePluginRepoRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoRegistryABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePluginRepoRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"PluginRepoRegistered"`.
 */
export function usePluginRepoRegistryPluginRepoRegisteredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof pluginRepoRegistryABI,
      'PluginRepoRegistered'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'PluginRepoRegistered',
    ...config,
  } as UseContractEventConfig<
    typeof pluginRepoRegistryABI,
    'PluginRepoRegistered'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function usePluginRepoRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoRegistryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePluginSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupABI,
    ...config,
  } as UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function usePluginSetupImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginSetupSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePluginSetupWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof pluginSetupABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupABI, TFunctionName, TMode>({
    abi: pluginSetupABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePluginSetupPrepareInstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupABI,
          'prepareInstallation'
        >['request']['abi'],
        'prepareInstallation',
        TMode
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<
        typeof pluginSetupABI,
        'prepareInstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupABI, 'prepareInstallation', TMode>({
    abi: pluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePluginSetupPrepareUninstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupABI,
          'prepareUninstallation'
        >['request']['abi'],
        'prepareUninstallation',
        TMode
      > & { functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<
        typeof pluginSetupABI,
        'prepareUninstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginSetupABI,
    'prepareUninstallation',
    TMode
  >({
    abi: pluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePluginSetupPrepareUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupABI,
          'prepareUpdate'
        >['request']['abi'],
        'prepareUpdate',
        TMode
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate', TMode> & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupABI, 'prepareUpdate', TMode>({
    abi: pluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePreparePluginSetupWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePreparePluginSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareInstallation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupABI,
    'prepareInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePreparePluginSetupPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupABI,
      'prepareUninstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupABI,
    'prepareUninstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePreparePluginSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 */
export function usePluginSetupProcessorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"APPLY_INSTALLATION_PERMISSION_ID"`.
 */
export function usePluginSetupProcessorApplyInstallationPermissionId<
  TFunctionName extends 'APPLY_INSTALLATION_PERMISSION_ID',
  TSelectData = ReadContractResult<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    functionName: 'APPLY_INSTALLATION_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"APPLY_UNINSTALLATION_PERMISSION_ID"`.
 */
export function usePluginSetupProcessorApplyUninstallationPermissionId<
  TFunctionName extends 'APPLY_UNINSTALLATION_PERMISSION_ID',
  TSelectData = ReadContractResult<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    functionName: 'APPLY_UNINSTALLATION_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"APPLY_UPDATE_PERMISSION_ID"`.
 */
export function usePluginSetupProcessorApplyUpdatePermissionId<
  TFunctionName extends 'APPLY_UPDATE_PERMISSION_ID',
  TSelectData = ReadContractResult<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    functionName: 'APPLY_UPDATE_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"repoRegistry"`.
 */
export function usePluginSetupProcessorRepoRegistry<
  TFunctionName extends 'repoRegistry',
  TSelectData = ReadContractResult<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    functionName: 'repoRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"states"`.
 */
export function usePluginSetupProcessorStates<
  TFunctionName extends 'states',
  TSelectData = ReadContractResult<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    functionName: 'states',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"validatePreparedSetupId"`.
 */
export function usePluginSetupProcessorValidatePreparedSetupId<
  TFunctionName extends 'validatePreparedSetupId',
  TSelectData = ReadContractResult<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    functionName: 'validatePreparedSetupId',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 */
export function usePluginSetupProcessorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupProcessorABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof pluginSetupProcessorABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, TFunctionName, TMode>(
    { abi: pluginSetupProcessorABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyInstallation"`.
 */
export function usePluginSetupProcessorApplyInstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupProcessorABI,
          'applyInstallation'
        >['request']['abi'],
        'applyInstallation',
        TMode
      > & { functionName?: 'applyInstallation' }
    : UseContractWriteConfig<
        typeof pluginSetupProcessorABI,
        'applyInstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'applyInstallation'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginSetupProcessorABI,
    'applyInstallation',
    TMode
  >({
    abi: pluginSetupProcessorABI,
    functionName: 'applyInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUninstallation"`.
 */
export function usePluginSetupProcessorApplyUninstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupProcessorABI,
          'applyUninstallation'
        >['request']['abi'],
        'applyUninstallation',
        TMode
      > & { functionName?: 'applyUninstallation' }
    : UseContractWriteConfig<
        typeof pluginSetupProcessorABI,
        'applyUninstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'applyUninstallation'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginSetupProcessorABI,
    'applyUninstallation',
    TMode
  >({
    abi: pluginSetupProcessorABI,
    functionName: 'applyUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUpdate"`.
 */
export function usePluginSetupProcessorApplyUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupProcessorABI,
          'applyUpdate'
        >['request']['abi'],
        'applyUpdate',
        TMode
      > & { functionName?: 'applyUpdate' }
    : UseContractWriteConfig<
        typeof pluginSetupProcessorABI,
        'applyUpdate',
        TMode
      > & {
        abi?: never
        functionName?: 'applyUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, 'applyUpdate', TMode>(
    {
      abi: pluginSetupProcessorABI,
      functionName: 'applyUpdate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePluginSetupProcessorPrepareInstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupProcessorABI,
          'prepareInstallation'
        >['request']['abi'],
        'prepareInstallation',
        TMode
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<
        typeof pluginSetupProcessorABI,
        'prepareInstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginSetupProcessorABI,
    'prepareInstallation',
    TMode
  >({
    abi: pluginSetupProcessorABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePluginSetupProcessorPrepareUninstallation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupProcessorABI,
          'prepareUninstallation'
        >['request']['abi'],
        'prepareUninstallation',
        TMode
      > & { functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<
        typeof pluginSetupProcessorABI,
        'prepareUninstallation',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginSetupProcessorABI,
    'prepareUninstallation',
    TMode
  >({
    abi: pluginSetupProcessorABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePluginSetupProcessorPrepareUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginSetupProcessorABI,
          'prepareUpdate'
        >['request']['abi'],
        'prepareUpdate',
        TMode
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<
        typeof pluginSetupProcessorABI,
        'prepareUpdate',
        TMode
      > & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginSetupProcessorABI,
    'prepareUpdate',
    TMode
  >({
    abi: pluginSetupProcessorABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 */
export function usePreparePluginSetupProcessorWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupProcessorABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupProcessorABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyInstallation"`.
 */
export function usePreparePluginSetupProcessorApplyInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupProcessorABI,
      'applyInstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    functionName: 'applyInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupProcessorABI,
    'applyInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUninstallation"`.
 */
export function usePreparePluginSetupProcessorApplyUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupProcessorABI,
      'applyUninstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    functionName: 'applyUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupProcessorABI,
    'applyUninstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUpdate"`.
 */
export function usePreparePluginSetupProcessorApplyUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupProcessorABI,
      'applyUpdate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    functionName: 'applyUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupProcessorABI,
    'applyUpdate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePreparePluginSetupProcessorPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupProcessorABI,
      'prepareInstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupProcessorABI,
    'prepareInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePreparePluginSetupProcessorPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupProcessorABI,
      'prepareUninstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupProcessorABI,
    'prepareUninstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePreparePluginSetupProcessorPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupProcessorABI,
      'prepareUpdate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupProcessorABI,
    'prepareUpdate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 */
export function usePluginSetupProcessorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"InstallationApplied"`.
 */
export function usePluginSetupProcessorInstallationAppliedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof pluginSetupProcessorABI,
      'InstallationApplied'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    eventName: 'InstallationApplied',
    ...config,
  } as UseContractEventConfig<
    typeof pluginSetupProcessorABI,
    'InstallationApplied'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"InstallationPrepared"`.
 */
export function usePluginSetupProcessorInstallationPreparedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof pluginSetupProcessorABI,
      'InstallationPrepared'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    eventName: 'InstallationPrepared',
    ...config,
  } as UseContractEventConfig<
    typeof pluginSetupProcessorABI,
    'InstallationPrepared'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UninstallationApplied"`.
 */
export function usePluginSetupProcessorUninstallationAppliedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof pluginSetupProcessorABI,
      'UninstallationApplied'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    eventName: 'UninstallationApplied',
    ...config,
  } as UseContractEventConfig<
    typeof pluginSetupProcessorABI,
    'UninstallationApplied'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UninstallationPrepared"`.
 */
export function usePluginSetupProcessorUninstallationPreparedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof pluginSetupProcessorABI,
      'UninstallationPrepared'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    eventName: 'UninstallationPrepared',
    ...config,
  } as UseContractEventConfig<
    typeof pluginSetupProcessorABI,
    'UninstallationPrepared'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UpdateApplied"`.
 */
export function usePluginSetupProcessorUpdateAppliedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdateApplied'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    eventName: 'UpdateApplied',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdateApplied'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UpdatePrepared"`.
 */
export function usePluginSetupProcessorUpdatePreparedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdatePrepared'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    eventName: 'UpdatePrepared',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdatePrepared'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 */
export function usePluginUupsUpgradeableUpgradePluginPermissionId<
  TFunctionName extends 'UPGRADE_PLUGIN_PERMISSION_ID',
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"dao"`.
 */
export function usePluginUupsUpgradeableDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function usePluginUupsUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"pluginType"`.
 */
export function usePluginUupsUpgradeablePluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function usePluginUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginUupsUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginUupsUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof pluginUupsUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: pluginUupsUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePluginUupsUpgradeableUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginUupsUpgradeableABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof pluginUupsUpgradeableABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof pluginUupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePluginUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pluginUupsUpgradeableABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof pluginUupsUpgradeableABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof pluginUupsUpgradeableABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePreparePluginUupsUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePreparePluginUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginUupsUpgradeableABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePreparePluginUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginUupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginUupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function usePluginUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function usePluginUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof pluginUupsUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePluginUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function usePluginUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link powerABI}__.
 */
export function usePowerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof powerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof powerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: powerABI, ...config } as UseContractReadConfig<
    typeof powerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link powerABI}__ and `functionName` set to `"version"`.
 */
export function usePowerVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof powerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof powerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: powerABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof powerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__.
 */
export function useProposalUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof proposalUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof proposalUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof proposalUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useProposalUpgradeableProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<
    typeof proposalUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof proposalUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<
    typeof proposalUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useProposalUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof proposalUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof proposalUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof proposalUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__.
 */
export function useProposalUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useProposalUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useProposalUpgradeableProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useProposalUpgradeableProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<
    typeof proposalUpgradeableABI,
    'ProposalExecuted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReentrancyGuardUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__.
 */
export function useResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"ABI"`.
 */
export function useResolverAbi<
  TFunctionName extends 'ABI',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'ABI',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"addr"`.
 */
export function useResolverAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'addr',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"content"`.
 */
export function useResolverContent<
  TFunctionName extends 'content',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'content',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"contenthash"`.
 */
export function useResolverContenthash<
  TFunctionName extends 'contenthash',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'contenthash',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"dnsRecord"`.
 */
export function useResolverDnsRecord<
  TFunctionName extends 'dnsRecord',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'dnsRecord',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"interfaceImplementer"`.
 */
export function useResolverInterfaceImplementer<
  TFunctionName extends 'interfaceImplementer',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'interfaceImplementer',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multihash"`.
 */
export function useResolverMultihash<
  TFunctionName extends 'multihash',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'multihash',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"name"`.
 */
export function useResolverName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"pubkey"`.
 */
export function useResolverPubkey<
  TFunctionName extends 'pubkey',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'pubkey',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"resolve"`.
 */
export function useResolverResolve<
  TFunctionName extends 'resolve',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'resolve',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useResolverSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"text"`.
 */
export function useResolverText<
  TFunctionName extends 'text',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'text',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"zonehash"`.
 */
export function useResolverZonehash<
  TFunctionName extends 'zonehash',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resolverABI,
    functionName: 'zonehash',
    ...config,
  } as UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__.
 */
export function useResolverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof resolverABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, TFunctionName, TMode>({
    abi: resolverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"approve"`.
 */
export function useResolverApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof resolverABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'approve', TMode>({
    abi: resolverABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"isApprovedFor"`.
 */
export function useResolverIsApprovedFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'isApprovedFor'
        >['request']['abi'],
        'isApprovedFor',
        TMode
      > & { functionName?: 'isApprovedFor' }
    : UseContractWriteConfig<typeof resolverABI, 'isApprovedFor', TMode> & {
        abi?: never
        functionName?: 'isApprovedFor'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'isApprovedFor', TMode>({
    abi: resolverABI,
    functionName: 'isApprovedFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useResolverIsApprovedForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'isApprovedForAll'
        >['request']['abi'],
        'isApprovedForAll',
        TMode
      > & { functionName?: 'isApprovedForAll' }
    : UseContractWriteConfig<typeof resolverABI, 'isApprovedForAll', TMode> & {
        abi?: never
        functionName?: 'isApprovedForAll'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'isApprovedForAll', TMode>({
    abi: resolverABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicall"`.
 */
export function useResolverMulticall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'multicall'
        >['request']['abi'],
        'multicall',
        TMode
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<typeof resolverABI, 'multicall', TMode> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'multicall', TMode>({
    abi: resolverABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicallWithNodeCheck"`.
 */
export function useResolverMulticallWithNodeCheck<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'multicallWithNodeCheck'
        >['request']['abi'],
        'multicallWithNodeCheck',
        TMode
      > & { functionName?: 'multicallWithNodeCheck' }
    : UseContractWriteConfig<
        typeof resolverABI,
        'multicallWithNodeCheck',
        TMode
      > & {
        abi?: never
        functionName?: 'multicallWithNodeCheck'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'multicallWithNodeCheck', TMode>({
    abi: resolverABI,
    functionName: 'multicallWithNodeCheck',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setABI"`.
 */
export function useResolverSetAbi<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setABI'
        >['request']['abi'],
        'setABI',
        TMode
      > & { functionName?: 'setABI' }
    : UseContractWriteConfig<typeof resolverABI, 'setABI', TMode> & {
        abi?: never
        functionName?: 'setABI'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setABI', TMode>({
    abi: resolverABI,
    functionName: 'setABI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setAddr"`.
 */
export function useResolverSetAddr<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setAddr'
        >['request']['abi'],
        'setAddr',
        TMode
      > & { functionName?: 'setAddr' }
    : UseContractWriteConfig<typeof resolverABI, 'setAddr', TMode> & {
        abi?: never
        functionName?: 'setAddr'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setAddr', TMode>({
    abi: resolverABI,
    functionName: 'setAddr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useResolverSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof resolverABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setApprovalForAll', TMode>({
    abi: resolverABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContent"`.
 */
export function useResolverSetContent<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setContent'
        >['request']['abi'],
        'setContent',
        TMode
      > & { functionName?: 'setContent' }
    : UseContractWriteConfig<typeof resolverABI, 'setContent', TMode> & {
        abi?: never
        functionName?: 'setContent'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setContent', TMode>({
    abi: resolverABI,
    functionName: 'setContent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContenthash"`.
 */
export function useResolverSetContenthash<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setContenthash'
        >['request']['abi'],
        'setContenthash',
        TMode
      > & { functionName?: 'setContenthash' }
    : UseContractWriteConfig<typeof resolverABI, 'setContenthash', TMode> & {
        abi?: never
        functionName?: 'setContenthash'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setContenthash', TMode>({
    abi: resolverABI,
    functionName: 'setContenthash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setDnsrr"`.
 */
export function useResolverSetDnsrr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setDnsrr'
        >['request']['abi'],
        'setDnsrr',
        TMode
      > & { functionName?: 'setDnsrr' }
    : UseContractWriteConfig<typeof resolverABI, 'setDnsrr', TMode> & {
        abi?: never
        functionName?: 'setDnsrr'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setDnsrr', TMode>({
    abi: resolverABI,
    functionName: 'setDnsrr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setInterface"`.
 */
export function useResolverSetInterface<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setInterface'
        >['request']['abi'],
        'setInterface',
        TMode
      > & { functionName?: 'setInterface' }
    : UseContractWriteConfig<typeof resolverABI, 'setInterface', TMode> & {
        abi?: never
        functionName?: 'setInterface'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setInterface', TMode>({
    abi: resolverABI,
    functionName: 'setInterface',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setMultihash"`.
 */
export function useResolverSetMultihash<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setMultihash'
        >['request']['abi'],
        'setMultihash',
        TMode
      > & { functionName?: 'setMultihash' }
    : UseContractWriteConfig<typeof resolverABI, 'setMultihash', TMode> & {
        abi?: never
        functionName?: 'setMultihash'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setMultihash', TMode>({
    abi: resolverABI,
    functionName: 'setMultihash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setName"`.
 */
export function useResolverSetName<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setName'
        >['request']['abi'],
        'setName',
        TMode
      > & { functionName?: 'setName' }
    : UseContractWriteConfig<typeof resolverABI, 'setName', TMode> & {
        abi?: never
        functionName?: 'setName'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setName', TMode>({
    abi: resolverABI,
    functionName: 'setName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setPubkey"`.
 */
export function useResolverSetPubkey<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setPubkey'
        >['request']['abi'],
        'setPubkey',
        TMode
      > & { functionName?: 'setPubkey' }
    : UseContractWriteConfig<typeof resolverABI, 'setPubkey', TMode> & {
        abi?: never
        functionName?: 'setPubkey'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setPubkey', TMode>({
    abi: resolverABI,
    functionName: 'setPubkey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setText"`.
 */
export function useResolverSetText<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof resolverABI,
          'setText'
        >['request']['abi'],
        'setText',
        TMode
      > & { functionName?: 'setText' }
    : UseContractWriteConfig<typeof resolverABI, 'setText', TMode> & {
        abi?: never
        functionName?: 'setText'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setText', TMode>({
    abi: resolverABI,
    functionName: 'setText',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__.
 */
export function usePrepareResolverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareResolverApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"isApprovedFor"`.
 */
export function usePrepareResolverIsApprovedFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'isApprovedFor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'isApprovedFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'isApprovedFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function usePrepareResolverIsApprovedForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareResolverMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicallWithNodeCheck"`.
 */
export function usePrepareResolverMulticallWithNodeCheck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'multicallWithNodeCheck'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'multicallWithNodeCheck',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof resolverABI,
    'multicallWithNodeCheck'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setABI"`.
 */
export function usePrepareResolverSetAbi(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setABI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setABI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setABI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setAddr"`.
 */
export function usePrepareResolverSetAddr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setAddr'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setAddr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setAddr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareResolverSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContent"`.
 */
export function usePrepareResolverSetContent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setContent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setContent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setContent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContenthash"`.
 */
export function usePrepareResolverSetContenthash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setContenthash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setContenthash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setContenthash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setDnsrr"`.
 */
export function usePrepareResolverSetDnsrr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setDnsrr'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setDnsrr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setDnsrr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setInterface"`.
 */
export function usePrepareResolverSetInterface(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setInterface',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setInterface'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setMultihash"`.
 */
export function usePrepareResolverSetMultihash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setMultihash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setMultihash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setMultihash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setName"`.
 */
export function usePrepareResolverSetName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setName'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setName'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setPubkey"`.
 */
export function usePrepareResolverSetPubkey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setPubkey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setPubkey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setPubkey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setText"`.
 */
export function usePrepareResolverSetText(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'setText'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setText',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setText'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__.
 */
export function useResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    ...config,
  } as UseContractEventConfig<typeof resolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"ABIChanged"`.
 */
export function useResolverAbiChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'ABIChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'ABIChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'ABIChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"AddrChanged"`.
 */
export function useResolverAddrChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'AddrChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'AddrChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'AddrChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"AddressChanged"`.
 */
export function useResolverAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'AddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'AddressChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'AddressChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"ContentChanged"`.
 */
export function useResolverContentChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'ContentChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'ContentChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'ContentChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"ContenthashChanged"`.
 */
export function useResolverContenthashChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'ContenthashChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'ContenthashChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'ContenthashChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"DNSRecordChanged"`.
 */
export function useResolverDnsRecordChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'DNSRecordChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'DNSRecordChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'DNSRecordChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"DNSRecordDeleted"`.
 */
export function useResolverDnsRecordDeletedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'DNSRecordDeleted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'DNSRecordDeleted',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'DNSRecordDeleted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"DNSZonehashChanged"`.
 */
export function useResolverDnsZonehashChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'DNSZonehashChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'DNSZonehashChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'DNSZonehashChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"InterfaceChanged"`.
 */
export function useResolverInterfaceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'InterfaceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'InterfaceChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'InterfaceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"NameChanged"`.
 */
export function useResolverNameChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'NameChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'NameChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'NameChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"PubkeyChanged"`.
 */
export function useResolverPubkeyChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'PubkeyChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'PubkeyChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'PubkeyChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"TextChanged"`.
 */
export function useResolverTextChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof resolverABI, 'TextChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resolverABI,
    eventName: 'TextChanged',
    ...config,
  } as UseContractEventConfig<typeof resolverABI, 'TextChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleHatchABI}__.
 */
export function useSimpleHatchRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof simpleHatchABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleHatchABI,
    ...config,
  } as UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"dao"`.
 */
export function useSimpleHatchDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof simpleHatchABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleHatchABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"pluginType"`.
 */
export function useSimpleHatchPluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof simpleHatchABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleHatchABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSimpleHatchSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof simpleHatchABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleHatchABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof simpleHatchABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleHatchABI}__.
 */
export function useSimpleHatchWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleHatchABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof simpleHatchABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof simpleHatchABI, TFunctionName, TMode>({
    abi: simpleHatchABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"cancel"`.
 */
export function useSimpleHatchCancel<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleHatchABI,
          'cancel'
        >['request']['abi'],
        'cancel',
        TMode
      > & { functionName?: 'cancel' }
    : UseContractWriteConfig<typeof simpleHatchABI, 'cancel', TMode> & {
        abi?: never
        functionName?: 'cancel'
      } = {} as any,
) {
  return useContractWrite<typeof simpleHatchABI, 'cancel', TMode>({
    abi: simpleHatchABI,
    functionName: 'cancel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"claimVesting"`.
 */
export function useSimpleHatchClaimVesting<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleHatchABI,
          'claimVesting'
        >['request']['abi'],
        'claimVesting',
        TMode
      > & { functionName?: 'claimVesting' }
    : UseContractWriteConfig<typeof simpleHatchABI, 'claimVesting', TMode> & {
        abi?: never
        functionName?: 'claimVesting'
      } = {} as any,
) {
  return useContractWrite<typeof simpleHatchABI, 'claimVesting', TMode>({
    abi: simpleHatchABI,
    functionName: 'claimVesting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"contribute"`.
 */
export function useSimpleHatchContribute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleHatchABI,
          'contribute'
        >['request']['abi'],
        'contribute',
        TMode
      > & { functionName?: 'contribute' }
    : UseContractWriteConfig<typeof simpleHatchABI, 'contribute', TMode> & {
        abi?: never
        functionName?: 'contribute'
      } = {} as any,
) {
  return useContractWrite<typeof simpleHatchABI, 'contribute', TMode>({
    abi: simpleHatchABI,
    functionName: 'contribute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"hatch"`.
 */
export function useSimpleHatchHatch<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleHatchABI,
          'hatch'
        >['request']['abi'],
        'hatch',
        TMode
      > & { functionName?: 'hatch' }
    : UseContractWriteConfig<typeof simpleHatchABI, 'hatch', TMode> & {
        abi?: never
        functionName?: 'hatch'
      } = {} as any,
) {
  return useContractWrite<typeof simpleHatchABI, 'hatch', TMode>({
    abi: simpleHatchABI,
    functionName: 'hatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"initialize"`.
 */
export function useSimpleHatchInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleHatchABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof simpleHatchABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof simpleHatchABI, 'initialize', TMode>({
    abi: simpleHatchABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"refund"`.
 */
export function useSimpleHatchRefund<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleHatchABI,
          'refund'
        >['request']['abi'],
        'refund',
        TMode
      > & { functionName?: 'refund' }
    : UseContractWriteConfig<typeof simpleHatchABI, 'refund', TMode> & {
        abi?: never
        functionName?: 'refund'
      } = {} as any,
) {
  return useContractWrite<typeof simpleHatchABI, 'refund', TMode>({
    abi: simpleHatchABI,
    functionName: 'refund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleHatchABI}__.
 */
export function usePrepareSimpleHatchWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleHatchABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleHatchABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleHatchABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"cancel"`.
 */
export function usePrepareSimpleHatchCancel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleHatchABI, 'cancel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleHatchABI,
    functionName: 'cancel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleHatchABI, 'cancel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"claimVesting"`.
 */
export function usePrepareSimpleHatchClaimVesting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleHatchABI, 'claimVesting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleHatchABI,
    functionName: 'claimVesting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleHatchABI, 'claimVesting'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"contribute"`.
 */
export function usePrepareSimpleHatchContribute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleHatchABI, 'contribute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleHatchABI,
    functionName: 'contribute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleHatchABI, 'contribute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"hatch"`.
 */
export function usePrepareSimpleHatchHatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleHatchABI, 'hatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleHatchABI,
    functionName: 'hatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleHatchABI, 'hatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSimpleHatchInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleHatchABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleHatchABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleHatchABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleHatchABI}__ and `functionName` set to `"refund"`.
 */
export function usePrepareSimpleHatchRefund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleHatchABI, 'refund'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleHatchABI,
    functionName: 'refund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleHatchABI, 'refund'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleHatchABI}__.
 */
export function useSimpleHatchEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof simpleHatchABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleHatchABI,
    ...config,
  } as UseContractEventConfig<typeof simpleHatchABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleHatchABI}__ and `eventName` set to `"Contribute"`.
 */
export function useSimpleHatchContributeEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleHatchABI, 'Contribute'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleHatchABI,
    eventName: 'Contribute',
    ...config,
  } as UseContractEventConfig<typeof simpleHatchABI, 'Contribute'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleHatchABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSimpleHatchInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleHatchABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleHatchABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof simpleHatchABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleHatchABI}__ and `eventName` set to `"Refund"`.
 */
export function useSimpleHatchRefundEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleHatchABI, 'Refund'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleHatchABI,
    eventName: 'Refund',
    ...config,
  } as UseContractEventConfig<typeof simpleHatchABI, 'Refund'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dsTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: dsTestABI, ...config } as UseContractReadConfig<
    typeof dsTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"HEVM_ADDRESS"`.
 */
export function useDsTestHevmAddress<
  TFunctionName extends 'HEVM_ADDRESS',
  TSelectData = ReadContractResult<typeof dsTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dsTestABI,
    functionName: 'HEVM_ADDRESS',
    ...config,
  } as UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useDsTestIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof dsTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dsTestABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"checkEq0"`.
 */
export function useDsTestCheckEq0<
  TFunctionName extends 'checkEq0',
  TSelectData = ReadContractResult<typeof dsTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dsTestABI,
    functionName: 'checkEq0',
    ...config,
  } as UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"failed"`.
 */
export function useDsTestFailed<
  TFunctionName extends 'failed',
  TSelectData = ReadContractResult<typeof dsTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dsTestABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof dsTestABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof dsTestABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, TFunctionName, TMode>({
    abi: dsTestABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEq"`.
 */
export function useDsTestAssertEq<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertEq'
        >['request']['abi'],
        'assertEq',
        TMode
      > & { functionName?: 'assertEq' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertEq', TMode> & {
        abi?: never
        functionName?: 'assertEq'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertEq', TMode>({
    abi: dsTestABI,
    functionName: 'assertEq',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEq0"`.
 */
export function useDsTestAssertEq0<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertEq0'
        >['request']['abi'],
        'assertEq0',
        TMode
      > & { functionName?: 'assertEq0' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertEq0', TMode> & {
        abi?: never
        functionName?: 'assertEq0'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertEq0', TMode>({
    abi: dsTestABI,
    functionName: 'assertEq0',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEq32"`.
 */
export function useDsTestAssertEq32<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertEq32'
        >['request']['abi'],
        'assertEq32',
        TMode
      > & { functionName?: 'assertEq32' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertEq32', TMode> & {
        abi?: never
        functionName?: 'assertEq32'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertEq32', TMode>({
    abi: dsTestABI,
    functionName: 'assertEq32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEqDecimal"`.
 */
export function useDsTestAssertEqDecimal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertEqDecimal'
        >['request']['abi'],
        'assertEqDecimal',
        TMode
      > & { functionName?: 'assertEqDecimal' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertEqDecimal', TMode> & {
        abi?: never
        functionName?: 'assertEqDecimal'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertEqDecimal', TMode>({
    abi: dsTestABI,
    functionName: 'assertEqDecimal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGe"`.
 */
export function useDsTestAssertGe<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertGe'
        >['request']['abi'],
        'assertGe',
        TMode
      > & { functionName?: 'assertGe' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertGe', TMode> & {
        abi?: never
        functionName?: 'assertGe'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertGe', TMode>({
    abi: dsTestABI,
    functionName: 'assertGe',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGeDecimal"`.
 */
export function useDsTestAssertGeDecimal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertGeDecimal'
        >['request']['abi'],
        'assertGeDecimal',
        TMode
      > & { functionName?: 'assertGeDecimal' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertGeDecimal', TMode> & {
        abi?: never
        functionName?: 'assertGeDecimal'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertGeDecimal', TMode>({
    abi: dsTestABI,
    functionName: 'assertGeDecimal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGt"`.
 */
export function useDsTestAssertGt<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertGt'
        >['request']['abi'],
        'assertGt',
        TMode
      > & { functionName?: 'assertGt' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertGt', TMode> & {
        abi?: never
        functionName?: 'assertGt'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertGt', TMode>({
    abi: dsTestABI,
    functionName: 'assertGt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGtDecimal"`.
 */
export function useDsTestAssertGtDecimal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertGtDecimal'
        >['request']['abi'],
        'assertGtDecimal',
        TMode
      > & { functionName?: 'assertGtDecimal' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertGtDecimal', TMode> & {
        abi?: never
        functionName?: 'assertGtDecimal'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertGtDecimal', TMode>({
    abi: dsTestABI,
    functionName: 'assertGtDecimal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLe"`.
 */
export function useDsTestAssertLe<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertLe'
        >['request']['abi'],
        'assertLe',
        TMode
      > & { functionName?: 'assertLe' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertLe', TMode> & {
        abi?: never
        functionName?: 'assertLe'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertLe', TMode>({
    abi: dsTestABI,
    functionName: 'assertLe',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLeDecimal"`.
 */
export function useDsTestAssertLeDecimal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertLeDecimal'
        >['request']['abi'],
        'assertLeDecimal',
        TMode
      > & { functionName?: 'assertLeDecimal' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertLeDecimal', TMode> & {
        abi?: never
        functionName?: 'assertLeDecimal'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertLeDecimal', TMode>({
    abi: dsTestABI,
    functionName: 'assertLeDecimal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLt"`.
 */
export function useDsTestAssertLt<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertLt'
        >['request']['abi'],
        'assertLt',
        TMode
      > & { functionName?: 'assertLt' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertLt', TMode> & {
        abi?: never
        functionName?: 'assertLt'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertLt', TMode>({
    abi: dsTestABI,
    functionName: 'assertLt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLtDecimal"`.
 */
export function useDsTestAssertLtDecimal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertLtDecimal'
        >['request']['abi'],
        'assertLtDecimal',
        TMode
      > & { functionName?: 'assertLtDecimal' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertLtDecimal', TMode> & {
        abi?: never
        functionName?: 'assertLtDecimal'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertLtDecimal', TMode>({
    abi: dsTestABI,
    functionName: 'assertLtDecimal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertTrue"`.
 */
export function useDsTestAssertTrue<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dsTestABI,
          'assertTrue'
        >['request']['abi'],
        'assertTrue',
        TMode
      > & { functionName?: 'assertTrue' }
    : UseContractWriteConfig<typeof dsTestABI, 'assertTrue', TMode> & {
        abi?: never
        functionName?: 'assertTrue'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'assertTrue', TMode>({
    abi: dsTestABI,
    functionName: 'assertTrue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"fail"`.
 */
export function useDsTestFail<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof dsTestABI, 'fail'>['request']['abi'],
        'fail',
        TMode
      > & { functionName?: 'fail' }
    : UseContractWriteConfig<typeof dsTestABI, 'fail', TMode> & {
        abi?: never
        functionName?: 'fail'
      } = {} as any,
) {
  return useContractWrite<typeof dsTestABI, 'fail', TMode>({
    abi: dsTestABI,
    functionName: 'fail',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__.
 */
export function usePrepareDsTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEq"`.
 */
export function usePrepareDsTestAssertEq(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEq'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertEq',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEq'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEq0"`.
 */
export function usePrepareDsTestAssertEq0(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEq0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertEq0',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEq0'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEq32"`.
 */
export function usePrepareDsTestAssertEq32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEq32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertEq32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEq32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertEqDecimal"`.
 */
export function usePrepareDsTestAssertEqDecimal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEqDecimal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertEqDecimal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertEqDecimal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGe"`.
 */
export function usePrepareDsTestAssertGe(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGe'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertGe',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGe'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGeDecimal"`.
 */
export function usePrepareDsTestAssertGeDecimal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGeDecimal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertGeDecimal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGeDecimal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGt"`.
 */
export function usePrepareDsTestAssertGt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertGt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertGtDecimal"`.
 */
export function usePrepareDsTestAssertGtDecimal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGtDecimal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertGtDecimal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertGtDecimal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLe"`.
 */
export function usePrepareDsTestAssertLe(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLe'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertLe',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLe'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLeDecimal"`.
 */
export function usePrepareDsTestAssertLeDecimal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLeDecimal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertLeDecimal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLeDecimal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLt"`.
 */
export function usePrepareDsTestAssertLt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertLt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertLtDecimal"`.
 */
export function usePrepareDsTestAssertLtDecimal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLtDecimal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertLtDecimal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertLtDecimal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"assertTrue"`.
 */
export function usePrepareDsTestAssertTrue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'assertTrue'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'assertTrue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'assertTrue'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"fail"`.
 */
export function usePrepareDsTestFail(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dsTestABI, 'fail'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'fail',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dsTestABI, 'fail'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log"`.
 */
export function useDsTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useDsTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useDsTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useDsTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useDsTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useDsTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useDsTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useDsTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useDsTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useDsTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useDsTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useDsTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useDsTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useDsTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useDsTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"logs"`.
 */
export function useDsTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'logs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__.
 */
export function useTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: testABI, ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTestIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useTestExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useTestExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useTestExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useTestTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useTestTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useTestTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useTestTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useTestTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function useTestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof testABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof testABI, TFunctionName, TMode>({
    abi: testABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function useTestFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testABI, 'failed'>['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof testABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof testABI, 'failed', TMode>({
    abi: testABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function usePrepareTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof testABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareTestFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testABI, 'failed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__.
 */
export function useTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: testABI, ...config } as UseContractEventConfig<
    typeof testABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log"`.
 */
export function useTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"logs"`.
 */
export function useTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'logs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__.
 */
export function useTokenVotingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"UPDATE_VOTING_SETTINGS_PERMISSION_ID"`.
 */
export function useTokenVotingUpdateVotingSettingsPermissionId<
  TFunctionName extends 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 */
export function useTokenVotingUpgradePluginPermissionId<
  TFunctionName extends 'UPGRADE_PLUGIN_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"canExecute"`.
 */
export function useTokenVotingCanExecute<
  TFunctionName extends 'canExecute',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'canExecute',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"canVote"`.
 */
export function useTokenVotingCanVote<
  TFunctionName extends 'canVote',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"dao"`.
 */
export function useTokenVotingDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"getProposal"`.
 */
export function useTokenVotingGetProposal<
  TFunctionName extends 'getProposal',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'getProposal',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"getVoteOption"`.
 */
export function useTokenVotingGetVoteOption<
  TFunctionName extends 'getVoteOption',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"getVotingToken"`.
 */
export function useTokenVotingGetVotingToken<
  TFunctionName extends 'getVotingToken',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'getVotingToken',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"implementation"`.
 */
export function useTokenVotingImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isMember"`.
 */
export function useTokenVotingIsMember<
  TFunctionName extends 'isMember',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isMinParticipationReached"`.
 */
export function useTokenVotingIsMinParticipationReached<
  TFunctionName extends 'isMinParticipationReached',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 */
export function useTokenVotingIsSupportThresholdReached<
  TFunctionName extends 'isSupportThresholdReached',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 */
export function useTokenVotingIsSupportThresholdReachedEarly<
  TFunctionName extends 'isSupportThresholdReachedEarly',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"minDuration"`.
 */
export function useTokenVotingMinDuration<
  TFunctionName extends 'minDuration',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'minDuration',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"minParticipation"`.
 */
export function useTokenVotingMinParticipation<
  TFunctionName extends 'minParticipation',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"minProposerVotingPower"`.
 */
export function useTokenVotingMinProposerVotingPower<
  TFunctionName extends 'minProposerVotingPower',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'minProposerVotingPower',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"pluginType"`.
 */
export function useTokenVotingPluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useTokenVotingProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useTokenVotingProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"supportThreshold"`.
 */
export function useTokenVotingSupportThreshold<
  TFunctionName extends 'supportThreshold',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTokenVotingSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"totalVotingPower"`.
 */
export function useTokenVotingTotalVotingPower<
  TFunctionName extends 'totalVotingPower',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'totalVotingPower',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"votingMode"`.
 */
export function useTokenVotingVotingMode<
  TFunctionName extends 'votingMode',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    functionName: 'votingMode',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__.
 */
export function useTokenVotingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof tokenVotingABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, TFunctionName, TMode>({
    abi: tokenVotingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"createProposal"`.
 */
export function useTokenVotingCreateProposal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          'createProposal'
        >['request']['abi'],
        'createProposal',
        TMode
      > & { functionName?: 'createProposal' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'createProposal', TMode> & {
        abi?: never
        functionName?: 'createProposal'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'createProposal', TMode>({
    abi: tokenVotingABI,
    functionName: 'createProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"execute"`.
 */
export function useTokenVotingExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'execute', TMode>({
    abi: tokenVotingABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"initialize"`.
 */
export function useTokenVotingInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'initialize', TMode>({
    abi: tokenVotingABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function useTokenVotingUpdateVotingSettings<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          'updateVotingSettings'
        >['request']['abi'],
        'updateVotingSettings',
        TMode
      > & { functionName?: 'updateVotingSettings' }
    : UseContractWriteConfig<
        typeof tokenVotingABI,
        'updateVotingSettings',
        TMode
      > & {
        abi?: never
        functionName?: 'updateVotingSettings'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'updateVotingSettings', TMode>(
    {
      abi: tokenVotingABI,
      functionName: 'updateVotingSettings',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useTokenVotingUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'upgradeTo', TMode>({
    abi: tokenVotingABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useTokenVotingUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof tokenVotingABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'upgradeToAndCall', TMode>({
    abi: tokenVotingABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"vote"`.
 */
export function useTokenVotingVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenVotingABI,
          'vote'
        >['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'vote', TMode>({
    abi: tokenVotingABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__.
 */
export function usePrepareTokenVotingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"createProposal"`.
 */
export function usePrepareTokenVotingCreateProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'createProposal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    functionName: 'createProposal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'createProposal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareTokenVotingExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareTokenVotingInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function usePrepareTokenVotingUpdateVotingSettings(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tokenVotingABI,
      'updateVotingSettings'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    functionName: 'updateVotingSettings',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tokenVotingABI,
    'updateVotingSettings'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareTokenVotingUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareTokenVotingUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareTokenVotingVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__.
 */
export function useTokenVotingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useTokenVotingAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useTokenVotingBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"Initialized"`.
 */
export function useTokenVotingInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"MembersAdded"`.
 */
export function useTokenVotingMembersAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'MembersAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'MembersAdded',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'MembersAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"MembersRemoved"`.
 */
export function useTokenVotingMembersRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'MembersRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'MembersRemoved',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'MembersRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"MembershipContractAnnounced"`.
 */
export function useTokenVotingMembershipContractAnnouncedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof tokenVotingABI,
      'MembershipContractAnnounced'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'MembershipContractAnnounced',
    ...config,
  } as UseContractEventConfig<
    typeof tokenVotingABI,
    'MembershipContractAnnounced'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useTokenVotingProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useTokenVotingProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useTokenVotingUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useTokenVotingVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"VotingSettingsUpdated"`.
 */
export function useTokenVotingVotingSettingsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'VotingSettingsUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    eventName: 'VotingSettingsUpdated',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'VotingSettingsUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof uupsUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, TFunctionName, TMode>({
    abi: uupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof uupsUpgradeableABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode>(
    {
      abi: uupsUpgradeableABI,
      functionName: 'upgradeToAndCall',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__.
 */
export function useUtilsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: utilsABI, ...config } as UseContractReadConfig<
    typeof utilsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useUtilsIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useUtilsExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useUtilsExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useUtilsExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useUtilsTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useUtilsTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useUtilsTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useUtilsTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useUtilsTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__.
 */
export function useUtilsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof utilsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof utilsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof utilsABI, TFunctionName, TMode>({
    abi: utilsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"createUsers"`.
 */
export function useUtilsCreateUsers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof utilsABI,
          'createUsers'
        >['request']['abi'],
        'createUsers',
        TMode
      > & { functionName?: 'createUsers' }
    : UseContractWriteConfig<typeof utilsABI, 'createUsers', TMode> & {
        abi?: never
        functionName?: 'createUsers'
      } = {} as any,
) {
  return useContractWrite<typeof utilsABI, 'createUsers', TMode>({
    abi: utilsABI,
    functionName: 'createUsers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"failed"`.
 */
export function useUtilsFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof utilsABI, 'failed'>['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof utilsABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof utilsABI, 'failed', TMode>({
    abi: utilsABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function useUtilsGetNextUserAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof utilsABI,
          'getNextUserAddress'
        >['request']['abi'],
        'getNextUserAddress',
        TMode
      > & { functionName?: 'getNextUserAddress' }
    : UseContractWriteConfig<typeof utilsABI, 'getNextUserAddress', TMode> & {
        abi?: never
        functionName?: 'getNextUserAddress'
      } = {} as any,
) {
  return useContractWrite<typeof utilsABI, 'getNextUserAddress', TMode>({
    abi: utilsABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"mineBlocks"`.
 */
export function useUtilsMineBlocks<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof utilsABI,
          'mineBlocks'
        >['request']['abi'],
        'mineBlocks',
        TMode
      > & { functionName?: 'mineBlocks' }
    : UseContractWriteConfig<typeof utilsABI, 'mineBlocks', TMode> & {
        abi?: never
        functionName?: 'mineBlocks'
      } = {} as any,
) {
  return useContractWrite<typeof utilsABI, 'mineBlocks', TMode>({
    abi: utilsABI,
    functionName: 'mineBlocks',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__.
 */
export function usePrepareUtilsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"createUsers"`.
 */
export function usePrepareUtilsCreateUsers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'createUsers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'createUsers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'createUsers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareUtilsFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'failed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function usePrepareUtilsGetNextUserAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'getNextUserAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'getNextUserAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"mineBlocks"`.
 */
export function usePrepareUtilsMineBlocks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'mineBlocks'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'mineBlocks',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'mineBlocks'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__.
 */
export function useUtilsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    ...config,
  } as UseContractEventConfig<typeof utilsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log"`.
 */
export function useUtilsLogEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_address"`.
 */
export function useUtilsLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_array"`.
 */
export function useUtilsLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useUtilsLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useUtilsLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_int"`.
 */
export function useUtilsLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useUtilsLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useUtilsLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useUtilsLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useUtilsLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useUtilsLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useUtilsLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useUtilsLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useUtilsLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useUtilsLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_string"`.
 */
export function useUtilsLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_uint"`.
 */
export function useUtilsLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"logs"`.
 */
export function useUtilsLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'logs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__.
 */
export function useVestingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vestingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: vestingABI,
    ...config,
  } as UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"computeReleasableAmount"`.
 */
export function useVestingComputeReleasableAmount<
  TFunctionName extends 'computeReleasableAmount',
  TSelectData = ReadContractResult<typeof vestingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vestingABI,
    functionName: 'computeReleasableAmount',
    ...config,
  } as UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"getSchedule"`.
 */
export function useVestingGetSchedule<
  TFunctionName extends 'getSchedule',
  TSelectData = ReadContractResult<typeof vestingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vestingABI,
    functionName: 'getSchedule',
    ...config,
  } as UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"getToken"`.
 */
export function useVestingGetToken<
  TFunctionName extends 'getToken',
  TSelectData = ReadContractResult<typeof vestingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vestingABI,
    functionName: 'getToken',
    ...config,
  } as UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"getWithdrawableAmount"`.
 */
export function useVestingGetWithdrawableAmount<
  TFunctionName extends 'getWithdrawableAmount',
  TSelectData = ReadContractResult<typeof vestingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vestingABI,
    functionName: 'getWithdrawableAmount',
    ...config,
  } as UseContractReadConfig<typeof vestingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vestingABI}__.
 */
export function useVestingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vestingABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof vestingABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof vestingABI, TFunctionName, TMode>({
    abi: vestingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"delegateVestedTokens"`.
 */
export function useVestingDelegateVestedTokens<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vestingABI,
          'delegateVestedTokens'
        >['request']['abi'],
        'delegateVestedTokens',
        TMode
      > & { functionName?: 'delegateVestedTokens' }
    : UseContractWriteConfig<
        typeof vestingABI,
        'delegateVestedTokens',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateVestedTokens'
      } = {} as any,
) {
  return useContractWrite<typeof vestingABI, 'delegateVestedTokens', TMode>({
    abi: vestingABI,
    functionName: 'delegateVestedTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"initialize"`.
 */
export function useVestingInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vestingABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof vestingABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof vestingABI, 'initialize', TMode>({
    abi: vestingABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"release"`.
 */
export function useVestingRelease<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vestingABI,
          'release'
        >['request']['abi'],
        'release',
        TMode
      > & { functionName?: 'release' }
    : UseContractWriteConfig<typeof vestingABI, 'release', TMode> & {
        abi?: never
        functionName?: 'release'
      } = {} as any,
) {
  return useContractWrite<typeof vestingABI, 'release', TMode>({
    abi: vestingABI,
    functionName: 'release',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"revoke"`.
 */
export function useVestingRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vestingABI,
          'revoke'
        >['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof vestingABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof vestingABI, 'revoke', TMode>({
    abi: vestingABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"transferVesting"`.
 */
export function useVestingTransferVesting<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vestingABI,
          'transferVesting'
        >['request']['abi'],
        'transferVesting',
        TMode
      > & { functionName?: 'transferVesting' }
    : UseContractWriteConfig<typeof vestingABI, 'transferVesting', TMode> & {
        abi?: never
        functionName?: 'transferVesting'
      } = {} as any,
) {
  return useContractWrite<typeof vestingABI, 'transferVesting', TMode>({
    abi: vestingABI,
    functionName: 'transferVesting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vestingABI}__.
 */
export function usePrepareVestingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vestingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vestingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vestingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"delegateVestedTokens"`.
 */
export function usePrepareVestingDelegateVestedTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vestingABI, 'delegateVestedTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vestingABI,
    functionName: 'delegateVestedTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vestingABI, 'delegateVestedTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareVestingInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vestingABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vestingABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vestingABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"release"`.
 */
export function usePrepareVestingRelease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vestingABI, 'release'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vestingABI,
    functionName: 'release',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vestingABI, 'release'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareVestingRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vestingABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vestingABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vestingABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"transferVesting"`.
 */
export function usePrepareVestingTransferVesting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vestingABI, 'transferVesting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vestingABI,
    functionName: 'transferVesting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vestingABI, 'transferVesting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vestingABI}__.
 */
export function useVestingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof vestingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: vestingABI,
    ...config,
  } as UseContractEventConfig<typeof vestingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vestingABI}__ and `eventName` set to `"Initialized"`.
 */
export function useVestingInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof vestingABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vestingABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof vestingABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822ProxiableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}
